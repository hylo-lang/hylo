/// An ordered, random-access collection.
public type Array<Element: Movable & Deinitializable>: Deinitializable {

  /// The out-of-line storage of the array.
  ///
  /// The header of the buffer indicates the number of elements contained in the array.
  var storage: DynamicBuffer<Int, Element>

  /// Creates an empty array.
  public init() {
    &storage = .new()
  }

  /// Deinitializes `self`.
  public fun deinit() sink {
    var i = 0
    while i < count() {
      &pointer_to_element[at: i].unsafe_pointee().deinit()
      &i += 1
    }
  }

  /// Returns the number of elements in `self`.
  public fun count() -> Int {
    if storage.capacity() == 0 { 0 } else { storage.header.copy() }
  }

  /// Returns `true` if `self` is empty.
  public fun is_empty() -> Bool {
    count() == 0
  }

  /// The number of elements that can be stored in the array before new storage must be allocated.
  public fun capacity() -> Int {
    return storage.capacity()
  }

  /// Reserves enough space to store `n` elements in `self`.
  public fun reserve_capacity(_ n: Int) inout {
    if n < capacity() { return }

    var new_capacity = max[1, capacity()].copy()
    while new_capacity < n {
      &new_capacity += new_capacity.copy()
    }

    // TODO: Call `self.copy()` directly in the lambda.
    let c = count()
    var new_storage = DynamicBuffer<Int, Element>(
      capacity: new_capacity,
      initializing_header_with: fun (_ h: set Int) -> Void { &h = c.copy() })

    var i = 0
    var e = storage.first_element_address()
    var f = new_storage.first_element_address()
    while i < count() {
      f.unsafe_initialize_pointee(e.unsafe_pointee())
      &e = e.advance(by: 1)
      &f = f.advance(by: 1)
      &i += 1
    }

    // Deinitializing the `self.storage` is safe at this point because all its elements must have
    // been moved to `new_storage`.
    &storage = new_storage
  }

  /// Projects a pointer to the start of the array's contiguous storage.
  ///
  /// The projected pointer is valid only for the duration of the projection and can be advanced up
  /// to `count()`. It may be null if `self` is empty.
  public property contiguous_storage: Pointer<Element> {
    yield if capacity() == 0 { .null() } else { .new(pointer_to_element[at: 0]) }
  }

  /// Calls `action` with a pointer to the start of the array's mutable contiguous storage.
  ///
  /// The projected pointer is valid only for the duration of the projection and can be advanced up
  /// to `count()`. It may be null if `self` is empty.
  public fun with_mutable_contiguous_storage<E, T>(
    _ action: inout [E](PointerToMutable<Element>) inout -> T
  ) inout -> T {
    if capacity() == 0 { &action(.null()) } else { &action(pointer_to_element[at: 0]) }
  }

  /// Adds a new element at the end of the array.
  public fun append(_ source: sink Element) inout {
    &reserve_capacity(count() + 1)
    pointer_to_element[at: count()].unsafe_initialize_pointee(source)
    &storage.header += 1
  }

  /// Reverses the elements of `self` in place.
  ///
  /// - Complexity: O(n), where n is the number of elements in `self`.
  public fun reverse() inout {
    var i = count() - 1
    var j = 0
    while i > j {
      swap_at(i, j)
      &i -= 1
      &j += 1
    }
  }

  /// Projects the address of the element at `position`.
  ///
  /// - Requires: `position` is in the range `0 ..< capacity()`.
  subscript pointer_to_element(at position: Int): PointerToMutable<Element> {
    storage.first_element_address().advance(by: position)
  }

}

public conformance Array: Collection {

  public typealias Position = Int

  public fun start_position() -> Int { 0 }

  public fun end_position() -> Int { count() }

  /// Returns the position immediately after `i`.
  ///
  /// - Requires: `i != end_position()`.
  /// - Complexity: O(1).
  public fun position(after i: Int) -> Int { i + 1 }

  /// Accesses the element at `position`.
  ///
  /// - Requires: `position` is in the range `0 ..< count()`.
  public subscript(_ position: Int): Element {
    let {
      // TODO: uncomment when #1046 is implemented
      // precondition(position >= 0 && position < count(), "position is out of bounds")
      pointer_to_element[at: position].unsafe[]
    }
    inout {
      // precondition(position >= 0 && position < count(), "position is out of bounds")
      pointer_to_element[at: position].unsafe[]
    }
  }

}

public conformance Array: MutableCollection {

  public fun swap_at(_ i: Int, _ j: Int) inout {
    // precondition(i >= 0 && i < count())
    // precondition(j >= 0 && j < count())
    if i == j { return }
    &pointer_to_element[at: i].unsafe[].exchange(with: &pointer_to_element[at: j].unsafe[])
  }

}

/*

// TODO: Make Array conform to Regular instead of Deinitializable once #1002 is fixed.
// Currently that issue prevents the copy() function below from compiling.
//
// Error is "type 'Element' does not conform to trait 'Movable'"

public conformance Array: Equatable {

  /// Returns `true` iff `other` has an equivalent value.
  public fun infix== (_ other: Self) -> Bool {
    // TODO
    return true
  }

}

public conformance Array: Copyable {
  /// Returns an equivalent instance.
  public fun copy() -> Self {
    // TODO
    .new()
  }
}

*/
