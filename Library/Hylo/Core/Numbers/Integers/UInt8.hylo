/// A 8-bit unsigned integer value.
public type UInt8 {

  var value: Builtin.i8

  memberwise init

  /// Creates an instance with value `0`.
  public init() {
    &self.value = Builtin.zeroinitializer_i8()
  }

  /// Creates an instance with the same memory representation as `other`.
  public init(bit_pattern other: Int8) {
    &self.value = other.value
  }

}

public conformance UInt8: ExpressibleByIntegerLiteral {}

public conformance UInt8: Deinitializable {}

public conformance UInt8: Copyable {

  public fun copy() -> Self {
    UInt8(value: value)
  }

}

public conformance UInt8: Equatable {

  public fun infix== (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_eq_i8(value, other.value))
  }

  public fun infix!= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_ne_i8(value, other.value))
  }

}

public conformance UInt8: Comparable {

  public fun infix< (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_ult_i8(value, other.value))
  }

  public fun infix<= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_ule_i8(value, other.value))
  }

  public fun infix> (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_ugt_i8(value, other.value))
  }

  public fun infix>= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_uge_i8(value, other.value))
  }

}
