/// A 8-bit signed integer value.
public type Int8 {

  var value: Builtin.i8

  memberwise init

  /// Creates an instance with the same memory representation as `other`.
  public init(bit_pattern other: UInt8) {
    &self.value = other.value
  }

  /// Creates a copy of `other`.
  ///
  /// - Requires: The value of `other` must be representable in this type.
  public init(_ other: Int) {
    &self.value = Builtin.trunc_word_i8(other.value)
  }

}

public conformance Int8: ExpressibleByIntegerLiteral {}

public conformance Int8: Deinitializable {}

public conformance Int8: Copyable {

  public fun copy() -> Self {
    Int8(value: value)
  }

}

public conformance Int8: Equatable {

  public fun infix== (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_eq_i8(value, other.value))
  }

  public fun infix!= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_ne_i8(value, other.value))
  }

}

public conformance Int8: Comparable {

  public fun infix< (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_slt_i8(value, other.value))
  }

  public fun infix<= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_sle_i8(value, other.value))
  }

  public fun infix> (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_sgt_i8(value, other.value))
  }

  public fun infix>= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_sge_i8(value, other.value))
  }

}

public conformance Int8: AdditiveArithmetic {

  public fun infix+ (_ other: Self) -> Self {
    Int8(value: Builtin.add_i8(value, other.value))
  }

  public fun infix+= (_ other: Self) inout {
    &self.value = Builtin.add_i8(value, other.value)
  }

  public fun infix- (_ other: Self) -> Self {
    Int8(value: Builtin.sub_i8(value, other.value))
  }

  public fun infix-= (_ other: Self) inout {
    &self.value = Builtin.sub_i8(value, other.value)
  }

  public static fun zero() -> Self {
    Int8()
  }

}

public conformance Int8: Numeric {

  public typealias Magnitude = UInt8

  public fun magnitude() -> UInt8 {
    UInt8(bit_pattern: self)
  }

  public fun infix* (_ other: Self) -> Self {
    Int8(value: Builtin.mul_i8(value, other.value))
  }

  public fun infix*= (_ other: Self) inout {
    &self.value = Builtin.mul_i8(value, other.value)
  }

}

public conformance Int8: SignedNumeric {

  public fun prefix- () -> Self {
    Int8() - self
  }

  public fun negate() inout {
    &self = -self
  }

}

public extension Int8 {

  public init() {
    &self.value = Builtin.zeroinitializer_i8()
  }

  public init<T: BinaryInteger>(truncating_or_extending source: T) {
    let w = source.words()
    &self.value = Builtin.trunc_word_i8(w[w.start_position()].value)
  }

}
