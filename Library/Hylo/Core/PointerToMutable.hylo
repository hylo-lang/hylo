/// A typed memory address whose contents can be read and written.
public type PointerToMutable<Pointee>: Regular {

  /// The raw bits of the address.
  var base: Builtin.ptr

  memberwise init

  /// The value at the address represented by `self`.
  ///
  /// - Requires: the address stores an object of type Pointee.
  public subscript unsafe(): Pointee {
    /// - Requires: nothing mutates the value's storage during this projection's lifetime.
    let { yield base as* (remote let Pointee) }

    /// - Requires: the value is mutable, and nothing accesses its
    ///   storage except through this projection during its lifetime.
    inout { yield &(base as* (remote let Pointee)) }
  }

  /// Creates an instance with mutable access to the memory pointed to by `p`.
  ///
  /// - Warning: while this initializer is not in itself unsafe, it should be used with caution.
  public init(adding_mutation_to p: Pointer<Pointee>) {
    &base = p.base
  }

  /// Creates an instance referring to the same address as `p`.
  ///
  /// Note that dereferencing type-punned pointers will cause problems unless the rules for the
  /// `usafe[]` subscript (which see) are followed.
  public init<Other>(type_punning p: PointerToMutable<Other>) {
    &base = p.base
  }

  /// Creates an instance that does not address any usable storage.
  public static fun null() -> Self {
    .new(base: Builtin.zeroinitializer_ptr())
  }

  /// Returns the result of applying `initialize` to the uninitialized `Pointee` storage.
  ///
  /// - Requires: the `MemoryLayout<Pointee>.size()` bytes starting at the address are uninitialized
  ///   and suitably aligned for `Pointee`.
  public fun unsafe_initialize_pointee<E, R>(_ initialize: inout [E](set Pointee) -> R) -> R {
    initialize(base as* (remote set Pointee))
  }

}


// FIXME: rename pointer[toMutable:]
/// The address of `x`.
public subscript pointerToMutable<T>(_ x: inout T): PointerToMutable<T> {
  let { yield PointerToMutable(base: Builtin.address(of: x)) }
}

public conformance PointerToMutable: Copyable {

  /// Returns an equivalent instance.
  ///
  /// Because we don't have a `nonmutating` keyword yet, writing to the pointee of a `let`-bound
  /// `PointerToMutable` is only possible by copying, e.g.  `&p.copy().unsafe[] = x`.
  public fun copy() -> Self {
    PointerToMutable(base: base)
  }

}

public conformance PointerToMutable: Equatable {

  /// Returns `true` iff `other` has an equivalent value.
  public fun infix== (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_eq_ptr(base, other.base))
  }

}
