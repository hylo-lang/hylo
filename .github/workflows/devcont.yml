  devcontainer:
    needs: determine-version
    name: Ubuntu dev container/${{ matrix.cmake_build_type }}
    strategy:
      fail-fast: false
      matrix:
        spm_configuration: [debug, release]
        include:
          - spm_configuration: debug
            cmake_build_type: Debug
            more-spm-test-options: --enable-code-coverage
            HYLO_LLVM_BUILD_TYPE: MinSizeRel

          - spm_configuration: release
            cmake_build_type: Release
            HYLO_LLVM_BUILD_TYPE: MinSizeRel

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          show-progress: false

      - name: Set compiler version
        run: ./Tools/set-hc-version.sh ${{ needs.determine-version.outputs.version }}

      - name: Initialize Dev Container
        uses: devcontainers/ci@v0.3
        with:
          runCmd: uname -a
          push: never

      - name: Build and Test via CMake
        uses: devcontainers/ci@v0.3
        env:
          HYLO_LLVM_BUILD_TYPE: ${{ matrix.HYLO_LLVM_BUILD_TYPE }}
        with:
          runCmd: >-
            cmake -GNinja -S . -B .ninja-build
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }}
            -DBUILD_TESTING=YES
            -DLLVM_DIR=/opt/llvm-${{ matrix.HYLO_LLVM_BUILD_TYPE }}/lib/cmake/llvm

            cmake --build .ninja-build

            find .ninja-build -name '*.o' -delete

            find .ninja-build -name '*.a' -delete

            ctest --output-on-failure --parallel --test-dir .ninja-build
          push: never

      - name: Reclaim disk space
        run: rm -rf .ninja-build

      - name: Restore Cache for SPM
        uses: actions/cache@v4
        with:
          path: .build
          key: devcontainer-${{ matrix.spm_configuration }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build and Test via SPM
        uses: devcontainers/ci@v0.3
        with:
          runCmd: |
            llvm-cov-15 --version
            swift test -c ${{ matrix.spm_configuration }} ${{ env.spm-build-options }} ${{ env.spm-test-options }} ${{ matrix.more-spm-test-options }}
          push: never

      - name: Export Coverage
        uses: devcontainers/ci@v0.3
        if: ${{ contains(matrix.more-spm-test-options, '--enable-code-coverage') }}
        with:
          runCmd: |
            shopt -s nullglob
            dot_os=(.build/${{ matrix.spm_configuration }}/*.build/*.o .build/${{ matrix.spm_configuration }}/*.build/**/*.o)
            bin_params=("${dot_os[0]}")
            for o in "${dot_os[@]:1}"; do
              bin_params+=("-object" "${o}")
            done
            # Note: on mac using llvm-cov from Xcode might require a leading xcrun.
            llvm-cov-15 export -format="lcov" -instr-profile "$(swift test -c ${{ matrix.spm_configuration }} --show-codecov-path | xargs dirname)"/default.profdata "${bin_params[@]}" > info.lcov
          push: never

      - name: Upload coverage reports to Codecov
        if: ${{ contains(matrix.more-spm-test-options, '--enable-code-coverage') }}
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Output compiler version
        uses: devcontainers/ci@v0.3
        with:
          runCmd: .build/${{ matrix.spm_configuration }}/hc --version
          push: never
