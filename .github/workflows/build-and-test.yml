name: Build and test

on:
  push:
    branches: [ main, rewrite ]
    paths-ignore:
      - "Docs/**"
      - "**.md"
      - "README.md"
      - "LICENSE"
      - ".gitignore"
  pull_request:
    branches: [ "**" ]
    paths-ignore:
      - "Docs/**"
      - "**.md"
      - "README.md"
      - "LICENSE"
      - ".gitignore"

jobs:
  build-devcontainer:
    name: "Devcontainer: ${{ matrix.host.os }}/${{ matrix.configuration }}"
    strategy:
      fail-fast: false
      matrix:
        host: [
          { type: linux, os: ubuntu-latest,
            build-options: "-v --build-tests -Xswiftc -enable-testing",
            test-options: "-v --enable-code-coverage"
          }
        ]
        configuration: [ "debug", "release" ]

    runs-on: ${{ matrix.host.os }}
    steps:
    - uses: actions/checkout@v3

    - run: git config --global core.autocrlf input

    - name: Build and Test
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          swift build -c ${{ matrix.configuration }}  ${{ matrix.host.build-options }} &&
          swift test -c ${{ matrix.configuration }} ${{ matrix.host.test-options }} |
            tee testoutput.txt && (
              (grep -q "[.']EndToEndTests[/. ]test_" testoutput.txt && grep -q "[.']ValTests[/. ]test_" testoutput.txt) ||
              (echo "error: generated tests failed to run; see
              https://github.com/apple/swift-package-manager/issues/6595" && false) )

    - name: Check code coverage
      uses: mattpolzin/swift-codecov-action@0.7.3
      with:
        SORT_ORDER: +cov
        MINIMUM_COVERAGE: 84
        CODECOV_JSON: .build/${{ matrix.configuration }}/codecov/*.json

  build-native-macos:
    name: "Native: ${{ matrix.host.os }}/${{ matrix.configuration }}"
    strategy:
      fail-fast: false
      matrix:
        host: [
          {
            type: macos, os: macos-latest,
            build-options: "-v --build-tests -Xswiftc -enable-testing",
            # No coverage support on MacOS
            test-options: "-v"
          }
        ]
        swift: [
          { version: "5.8" }
        ]
        configuration: [ "debug", "release" ]

    runs-on: ${{ matrix.host.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - run: git config --global core.autocrlf input

    - name: Setup swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ matrix.swift.version }}

    - run: swift --version

    - name: Setup LLVM
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "15.0"

    - run: llvm-config --version

    - name: Generate LLVM pkgconfig file
      run: |
        swift package resolve &&
        .build/checkouts/Swifty-LLVM/Tools/make-pkgconfig.sh llvm.pc &&
        cat llvm.pc

    - name: Build (${{ matrix.configuration }})
      run: |
        export PKG_CONFIG_PATH=$PWD &&
        swift build -c ${{ matrix.configuration }} ${{ matrix.host.build-options }}

    - name: Test (${{ matrix.configuration }})
      run: |
        export PKG_CONFIG_PATH=$PWD &&
        swift test -c ${{ matrix.configuration }} ${{ matrix.host.test-options }} |
          tee testoutput.txt && (
            (grep -q "[.']EndToEndTests[/. ]test_" testoutput.txt && grep -q "[.']ValTests[/. ]test_" testoutput.txt) ||
            (echo "error: generated tests failed to run; see
            https://github.com/apple/swift-package-manager/issues/6595" && false) )
          
    build-native-windows:
    name: "Native: ${{ matrix.host.os }}/release"
    strategy:
      fail-fast: false
      matrix:
        host: [
          { type: windows, os: windows-latest },
        ]
        swift: [
          { windows-branch: "swift-5.8-release", windows-tag: "5.8-RELEASE" }
        ]
    runs-on: ${{ matrix.host.os }}
    steps:
    - name: Setup swift
      uses: compnerd/gha-setup-swift@main
      if: matrix.host.type == 'windows'
      with:
        branch: ${{ matrix.swift.windows-branch }}
        tag: ${{ matrix.swift.windows-tag }}

    - run: |
        git config --global core.autocrlf input
    - uses: actions/checkout@v3

    - name: Swift version
      run: swift --version

    - name: Set up LLVM 15.0.6
      run: |
        curl.exe -L -O -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"https://github.com/c3lang/win-llvm/releases/download/llvm_15_0_6/llvm-15.0.6-windows-x86-msvc17-msvcrt.7z
        7z x llvm-15.0.6-windows-x86-msvc17-msvcrt.7z -oC:\
        
    - name: Copy include in LLVM folder
      run: xcopy c:\llvm-15.0.6-windows-x86-msvc17-msvcrt\include\*.* c:\program" "files\microsoft" "visual" "studio\2022\enterprise\vc\tools\msvc\14.34.31933\include /s /h

    - name: Copy lib in LLVM folder
      run: xcopy c:\llvm-15.0.6-windows-x86-msvc17-msvcrt\lib\*.* c:\program" "files\microsoft" "visual" "studio\2022\enterprise\vc\tools\msvc\14.34.31933\lib\x64 /s /h

    - name: Add LLVM to Path
      run: Add-Content $env:GITHUB_PATH 'C:\llvm-15.0.6-windows-x86-msvc17-msvcrt\bin'

    - run: llvm-config --version

    - name: Build (Release)
      id: build
      continue-on-error: true
      run: swift build -v -c release

    - name: Retry on failure
      continue-on-error: false
      if: steps.build.outcome != 'success'
      run: swift build -v -c release

    - name: Test (Release)
      id: test
      continue-on-error: true
      run: swift test -c release -Xswiftc -enable-testing ${{matrix.host.test-options}}

    - name: Retry on failure
      continue-on-error: false
      if: steps.test.outcome != 'success'
      run: swift test -c release -Xswiftc -enable-testing ${{matrix.host.test-options}} 