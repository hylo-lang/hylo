name: Build and test

# README:
#
# The semantics for running shell commands in GitHub actions is non-obvious. Please read
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
# before modifying this file. Our strategy is to rely on the built-in (unspecified) shell, and
# explicitly set the shell settings we want (with `set -eo pipefail`) at the beginning of any
# bash script. For more information on these settings, see `man bash`.
#
# GitHub Actions files can be difficult to modify with confidence, because testing changes often
# requires pushing to a branch and running CI remotely. To make this process easier, consider
# the following:
#
# 1) Use Visual Studio Code with the GitHub Actions Extension (github.vscode-github-actions).
#    This allows you to check the validity of your action schema and syntax without pushing to a
#    branch.
# 2) Use https://github.com/nektos/act to run your CI steps locally. Note this will only work with
#    steps run on Linux platforms, as `act` is implemented with Docker containers.

on:
  push:
    branches: [ main, rewrite ]
    paths-ignore:
      - "Docs/**"
      - "**.md"
      - "README.md"
      - "LICENSE"
      - ".gitignore"
    tags:
      - v*
  pull_request:
    branches: [ "**" ]
    paths-ignore:
      - "Docs/**"
      - "**.md"
      - "README.md"
      - "LICENSE"
      - ".gitignore"

env:
  build-options: -Xswiftc -enable-testing --explicit-target-dependency-import-check error
  test-options: --explicit-target-dependency-import-check error --skip-build
  swift-version: '5.9'

jobs:
  determine-version:
    name: "Determine compiler version from git tag"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-tag.outputs.version }}
    steps:
    - id: get-tag
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          version=${GITHUB_REF#refs/tags/}
        else
          version=""
        fi
        echo "version=$version" >> $GITHUB_OUTPUT

  build-devcontainer:
    needs: determine-version
    name: Ubuntu dev container/${{ matrix.configuration }}
    strategy:
      fail-fast: false
      matrix:
        configuration: [debug, release]
        include:
          - configuration: debug
            more-test-options: --parallel --enable-code-coverage

          - configuration: release
            # Re: missing --parallel, see https://github.com/apple/swift-package-manager/issues/7069
            more-test-options:  --enable-code-coverage

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        show-progress: false

    - name: Set compiler version
      run: ./Tools/set-hc-version.sh ${{ needs.determine-version.outputs.version }}

    - uses: actions/cache@v4
      with:
        path: .build
        key: devcontainer-${{ matrix.configuration }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Build and Test
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          set -eo pipefail
          swift build -c ${{ matrix.configuration }} ${{ env.build-options }} --build-tests

          swift test -c ${{ matrix.configuration }} ${{ env.test-options }} ${{ matrix.more-test-options }} |
            tee testoutput.txt && (
              (grep -q "[.']EndToEndTests[/. ]test_" testoutput.txt && grep -q "[.']HyloTests[/. ]test_" testoutput.txt) ||
              (echo "error: generated tests failed to run; see
              https://github.com/apple/swift-package-manager/issues/6595" && false) )

          .build/${{ matrix.configuration }}/hc --version
        push: never

    - name: Check code coverage
      uses: mattpolzin/swift-codecov-action@0.7.5
      with:
        SORT_ORDER: +cov
        MINIMUM_COVERAGE: 84
        CODECOV_JSON: .build/${{ matrix.configuration }}/codecov/*.json

  build-native:
    needs: determine-version
    name: "Native: ${{ matrix.os }}/${{ matrix.configuration }}"
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-13, windows-latest ]
        configuration: [ debug, release ]
        exclude:
          - os: windows-latest
            configuration: debug
        include:
          - HYLO_LLVM_BUILD_RELEASE: 20240303-215025
          - HYLO_LLVM_BUILD_TYPE: MinSizeRel
          - HYLO_LLVM_DOWNLOAD_URL: https://github.com/hylo-lang/llvm-build/releases/download
          - HYLO_LLVM_VERSION: 17.0.6
          - package_suffix: .tar.zst
          - unpackage_command: tar -x --zstd -f
          - test_verification:  >-
              | tee testoutput.txt && (
              (grep -q "[.']EndToEndTests[/. ]test_" testoutput.txt && grep -q "[.']HyloTests[/. ]test_" testoutput.txt) ||
              (echo "error: generated tests failed to run; see
              https://github.com/apple/swift-package-manager/issues/6595" && false) )
          # https://github.com/apple/swift/issues/72121
          - windows_only: '# WINDOWS ONLY:'

          - os: windows-latest
            unpackage_command: 7z x -t7z
            package_suffix: .7z
            triple_suffix: unknown-windows-msvc17
            test_verification:
            windows_only:
            build_platform_subdirectory: x86_64-unknown-windows-msvc

          - os: macos-13
            triple_suffix: apple-darwin23.3.0
            build_platform_subdirectory: x86_64-apple-macosx

    runs-on: ${{ matrix.os }}
    env:
      llvm_url_prefix: ${{ matrix.HYLO_LLVM_DOWNLOAD_URL }}/${{ matrix.HYLO_LLVM_BUILD_RELEASE }}
      llvm_package_basename: llvm-${{ matrix.HYLO_LLVM_VERSION }}-x86_64-${{ matrix.triple_suffix }}-${{ matrix.HYLO_LLVM_BUILD_TYPE }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
        show-progress: false
        path: hylo

    - name: Set compiler version
      working-directory: hylo
      run: ./Tools/set-hc-version.sh ${{ needs.determine-version.outputs.version }}
      shell: bash

    - name: Set up swift (non-Windows)
      if: ${{ runner.os != 'Windows' }}
      uses: SwiftyLab/setup-swift@latest
      with:
        swift-version: ${{ env.swift-version }}

    - uses: compnerd/gha-setup-vsdevenv@main
    - name: Set up swift (Windows)
      if: ${{ runner.os == 'Windows' }}
      uses: compnerd/gha-setup-swift@v0.2.1
      with:
        branch: swift-${{ env.swift-version }}-release
        tag: ${{ env.swift-version }}-RELEASE

    - name: 'Swift version check'
      run: swift --version && swift --version | grep -q ${{ env.swift-version }}
      shell: bash

    - name: Install LLVM
      # 7z doesn't support decompressing from a stream or we'd do this all as one statement. Maybe
      # we should find a way to use zstd on windows.
      run: >-
        curl --no-progress-meter -L -O
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
        ${{ env.llvm_url_prefix }}/${{ env.llvm_package_basename }}${{ matrix.package_suffix }}

        ${{ matrix.unpackage_command }} ${{ env.llvm_package_basename }}${{ matrix.package_suffix }}

    - name: Create LLVM pkgconfig file and make it findable
      run: |
        set -ex -o pipefail
        PATH="${{ github.workspace }}/${{ env.llvm_package_basename }}/bin:$PATH" \
          hylo/Tools/make-pkgconfig.sh llvm.pc
        echo 'PKG_CONFIG_PATH=${{ github.workspace }}' >> $GITHUB_ENV
      shell: bash

    - uses: actions/cache@v4
      with:
        path: hylo/.build
        key: ${{ runner.os }}-${{ matrix.configuration }}-spm-${{ hashFiles('hylo/**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.configuration }}-spm-

    - if: ${{ matrix.os == 'windows-latest' }}
      name: Build support library
      run: clang -c ./StandardLibrary/Sources/LibC.c -o HyloLibC.lib
      working-directory: hylo

    - if: ${{ matrix.os == 'windows-latest' }}
      name: Build the dependencies of build tools
      run: |
        echo 'SPM_BUILD_TOOL_SUPPORT_NO_REENTRANT_BUILD=1' >> $env:GITHUB_ENV
        swift build ${{ env.build-options }} --target BuildToolDependencies
        # https://github.com/apple/swift/issues/72121
        if (-not $?) {
            swift build ${{ env.build-options }} --target BuildToolDependencies
        }
      working-directory: hylo

    - name: Build
      run: |
        swift build -c ${{ matrix.configuration }} ${{ env.build-options }} --build-tests
        ${{ matrix.windows_only }} if (-not $?) { swift build ${{ env.build-options }} --target BuildToolDependencies }

      working-directory: hylo

    - name: Test
      run: |
        swift test -c ${{ matrix.configuration }} ${{ env.test-options }} --parallel ${{ matrix.test_verification }}
        ${{ matrix.windows_only }} if (-not $?) { swift test -c ${{ matrix.configuration }} ${{ env.test-options }} --parallel ${{ matrix.test_verification }} }
      working-directory: hylo

    - name: Output compiler version
      run: |
        hylo/.build/${{ matrix.build_platform_subdirectory }}/${{ matrix.configuration }}/hc --version
