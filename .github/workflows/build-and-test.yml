---
name: Build and test

# README:
#
# The semantics for running shell commands in GitHub actions is non-obvious. Please read
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
# before modifying this file. Our strategy is to rely on the built-in (unspecified) shell, and
# explicitly set the shell settings we want (with `set -eo pipefail`) at the beginning of any
# bash script. For more information on these settings, see `man bash`.
#
# GitHub Actions files can be difficult to modify with confidence, because testing changes often
# requires pushing to a branch and running CI remotely. To make this process easier, consider
# the following:
#
# 1) Use Visual Studio Code with the GitHub Actions Extension (github.vscode-github-actions).
#    This allows you to check the validity of your action schema and syntax without pushing to a
#    branch.
# 2) Use https://github.com/nektos/act to run your CI steps locally. Note this will only work with
#    steps run on Linux platforms, as `act` is implemented with Docker containers.
#
on:
  push:
    branches: [main]
    paths-ignore:
      - "Docs/**"
      - "**.md"
      - "README.md"
      - "LICENSE"
      - ".gitignore"
      - ".editorconfig"
    tags:
      - v*
  pull_request:
    branches: ["**"]
    paths-ignore:
      - "Docs/**"
      - "**.md"
      - "README.md"
      - "LICENSE"
      - ".gitignore"
      - ".editorconfig"

env:
  spm-build-options: -Xswiftc -enable-testing --explicit-target-dependency-import-check error
  spm-test-options: --parallel
  swift-version: '6.1'

jobs:
  determine-version:
    name: "Determine compiler version from git tag"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-tag.outputs.version }}
    steps:
      - id: get-tag
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            version="${GITHUB_REF#refs/tags/}"
          else
            version=""
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"

  devcontainer:
    needs: determine-version
    name: Ubuntu dev container/${{ matrix.build-system }}/${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [debug, release]
        build-system: [cmake, spm]
        HYLO_LLVM_BUILD_TYPE: [MinSizeRel]

        include:
          # Map config to cmake build type
          - config: debug
            cmake-build-type: Debug
          - config: release
            cmake-build-type: Release

          # Enable code coverage for this specific job (devcontainer, spm debug build)
          - config: debug
            build-system: spm
            more-spm-test-options: --enable-code-coverage

    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          show-progress: false

      - name: Set compiler version
        run: ./Tools/set-hc-version.sh ${{ needs.determine-version.outputs.version }}

      - name: Initialize Dev Container
        uses: devcontainers/ci@v0.3
        with:
          runCmd: uname -a # Just print OS information
          push: never

      # CMAKE BASED BUILD ================================================================
      - name: Build and Test via CMake
        if: ${{ matrix.build-system == 'cmake' }}
        uses: devcontainers/ci@v0.3
        env:
          HYLO_LLVM_BUILD_TYPE: ${{ matrix.HYLO_LLVM_BUILD_TYPE }}
        with:
          runCmd: >-
            set -exu # fail fast, print commands before executing, treat unset variables as an error

            LLVM_DIR="$(llvm-config --prefix)/lib/cmake/llvm"

            echo "Using LLVM_DIR: $LLVM_DIR"
          
            ls "$LLVM_DIR"
          
            cmake -GNinja -S . -B .cmake-build
            -DCMAKE_BUILD_TYPE="${{ matrix.cmake-build-type }}"
            -DBUILD_TESTING=YES
            -DLLVM_DIR="$LLVM_DIR"

            cmake --build .cmake-build

            find .cmake-build -name '*.o' -delete

            find .cmake-build -name '*.a' -delete

            ctest --output-on-failure --parallel --test-dir .cmake-build
          push: never

      # SPM BASED BUILD =================================================================
      - name: Restore Cache for SPM
        if: ${{ matrix.build-system == 'spm' }}
        uses: actions/cache@v4
        with:
          path: .build
          key: devcontainer-${{ matrix.config }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build and Test via SPM
        if: ${{ matrix.build-system == 'spm' }}
        uses: devcontainers/ci@v0.3
        with: # todo make pipe fail if first command fails
          runCmd: |
            /usr/bin/llvm-cov --version
            swift test -c ${{ matrix.config }} ${{ env.spm-build-options }} ${{ env.spm-test-options }} ${{ matrix.more-spm-test-options }}
          push: never

      - name: Export Coverage
        uses: devcontainers/ci@v0.3
        if: ${{ matrix.build-system == 'spm' && contains(matrix.more-spm-test-options, '--enable-code-coverage') }}
        with:
          runCmd: |
            shopt -s nullglob
            dot_os=(.build/${{ matrix.config }}/*.build/*.o .build/${{ matrix.config }}/*.build/**/*.o)
            bin_params=("${dot_os[0]}")
            for o in "${dot_os[@]:1}"; do
              bin_params+=("-object" "${o}")
            done
            # Note: on mac using llvm-cov from Xcode might require a leading xcrun.
            /usr/bin/llvm-cov export -format="lcov" -instr-profile "$(swift test -c ${{ matrix.config }} --show-codecov-path | xargs dirname)"/default.profdata "${bin_params[@]}" > info.lcov
          push: never

      - name: Upload coverage reports to Codecov
        if: ${{ matrix.build-system == 'spm' && contains(matrix.more-spm-test-options, '--enable-code-coverage') }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Output compiler version
        if: ${{ matrix.build-system == 'spm' }}
        uses: devcontainers/ci@v0.3
        with:
          runCmd: .build/${{ matrix.config }}/hc --version
          push: never

  native-spm:
    needs: determine-version
    name: "Native: ${{ matrix.exact-os }}/SPM/${{ matrix.config }}"
    strategy:
      fail-fast: false
      matrix:
        exact-os: [macos-15, ubuntu-24.04, windows-2025]
        config: [debug, release]

    runs-on: ${{ matrix.exact-os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          show-progress: false
          path: hylo

      - name: Set compiler version
        working-directory: hylo
        run: ./Tools/set-hc-version.sh ${{ needs.determine-version.outputs.version }}
        shell: bash

      - name: Set up LLVM
        uses: hylo-lang/get-llvm@v0.2.2

      - name: Set up swift
        uses: SwiftyLab/setup-swift@latest
        with:
          swift-version: ${{ env.swift-version }} # already verifies Swift version

      - name: Set up Visual Studio Development Environment (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: compnerd/gha-setup-vsdevenv@main
        with:
          winsdk: "10.0.22621.0" # Workaround for this: https://forums.swift.org/t/swiftpm-plugin-doesnt-work-with-the-latest-visual-studio-version/78183/14
          # TL;DR: The Windows SDK had a change in 10.0.26100.0 that the Swift compiler didn't account for.
          # The Swift compiler team is aware of the issue and they are going to release a fix some time.

      - name: SPM cache setup
        # Workaround for https://github.com/actions/cache/issues/1541
        uses: actions/cache@v4.2.2
        with:
          path: hylo/.build
          key: ${{ matrix.exact-os }}-${{ matrix.config }}-spm-${{ hashFiles('hylo/**/Package.resolved') }}
          restore-keys: |
            ${{ matrix.exact-os }}-${{ matrix.config }}-spm-

      - name: Build support library (Only for SPM on Windows)
        if: ${{ runner.os == 'Windows' }}
        run: clang -c ./StandardLibrary/Sources/LibC.c -o HyloLibC.lib
        working-directory: hylo

      - name: Build the dependencies of build tools
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo 'SPM_BUILD_TOOL_SUPPORT_NO_REENTRANT_BUILD=1' >> $env:GITHUB_ENV
          swift build ${{ env.spm-build-options }} --target BuildToolDependencies
          # https://github.com/apple/swift/issues/72121
          if (-not $?) {
              swift build ${{ env.spm-build-options }} --target BuildToolDependencies
          }
        working-directory: hylo

      - name: Build
        run: |
          swift build -c ${{ matrix.config }} ${{ env.spm-build-options }} --build-tests
          if (-not $?) { swift build ${{ env.spm-build-options }} --target BuildToolDependencies } 
        # Reason for second line: https://github.com/apple/swift/issues/72121
        shell: pwsh
        working-directory: hylo

      - name: Test
        run: |
          swift test --skip-build -c ${{ matrix.config }} ${{ env.spm-build-options }} ${{ env.spm-test-options }}
          if (-not $?) { swift test -c ${{ matrix.config }} ${{ env.spm-test-options }} }
        # Reason for second line: https://github.com/apple/swift/issues/72121
        shell: pwsh
        working-directory: hylo


  native-cmake:
    needs: determine-version
    name: "Native: ${{ matrix.exact-os }}/CMake/${{ matrix.cmake-build-type }}/${{ matrix.cmake-generator }}"
    strategy:
      fail-fast: false
      matrix:
        # Temporarily disable CMake builds on macOS because of some compilation issues regarding tgmath.h used by the Algorithms library transitively.
        exact-os: [ubuntu-24.04, windows-2025, macos-15] # macos-15
        cmake-generator: [Ninja, Xcode]
        cmake-build-type: [Debug, Release]

        exclude:
          # Exclude Xcode for non-macOS platforms
          - exact-os: ubuntu-24.04
            cmake-generator: Xcode

          - exact-os: windows-2025
            cmake-generator: Xcode

          - exact-os: macos-15
            cmake-generator: Xcode
          # Todo add back Xcode after migrating to macos-15. See compatibility table at
          # https://developer.apple.com/support/xcode/#:~:text=and%20other%C2%A0developers.-,Xcode%20Releases,-Latest%20Xcode%20versions 
          # Note: there are some breaking changes between macos 14 and 15 regarding the Encoder/Decoder protocols.

    runs-on: ${{ matrix.exact-os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          show-progress: false
          path: hylo

      - name: Set compiler version
        working-directory: hylo
        run: ./Tools/set-hc-version.sh ${{ needs.determine-version.outputs.version }}
        shell: bash

      - name: Set up LLVM
        uses: hylo-lang/get-llvm@v0.2.2

      - name: Set up Swift
        uses: SwiftyLab/setup-swift@latest
        with:
          swift-version: ${{ env.swift-version }} # already verifies Swift version

      - name: Set up Visual Studio Development Environment (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: compnerd/gha-setup-vsdevenv@main
        with:
          winsdk: "10.0.22621.0" # Workaround for this: https://forums.swift.org/t/swiftpm-plugin-doesnt-work-with-the-latest-visual-studio-version/78183/14
          # TL;DR: The Windows SDK had a change in 10.0.26100.0 that the Swift compiler didn't account for.
          # The Swift compiler team is aware of the issue and they are going to release a fix some time.

      - name: Set up latest CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latestrc

      - name: CMake Configure
        shell: bash
        run: >-
          set -exu # fail fast, print commands before executing, treat unset variables as an error

          LLVM_DIR="$(llvm-config --prefix)/lib/cmake/llvm"

          echo "Using LLVM_DIR: $LLVM_DIR"
          
          ls "$LLVM_DIR"

          cmake -G '${{ matrix.cmake-generator }}' -S . -B .cmake-build
          ${{ matrix.cmake-generator != 'Xcode' && format('-DCMAKE_BUILD_TYPE={0}', matrix.cmake-build-type) || '' }}
          -DBUILD_TESTING=YES
          -DLLVM_DIR="$LLVM_DIR"
          ${{ runner.os == 'macOS' && '-DCMAKE_Swift_COMPILER=$(xcrun -f swiftc) -DCMAKE_OSX_SYSROOT=$(xcrun --show-sdk-path)' || '' }}
        working-directory: hylo

      - name: Build
        run: cmake --build hylo/.cmake-build ${{ matrix.cmake-generator == 'Xcode' && format('--config {0}', matrix.cmake-build-type) || '' }}

      - name: Test
        run: ctest --output-on-failure --parallel --test-dir hylo/.cmake-build ${{ matrix.cmake-generator == 'Xcode' && format('-C {0}', matrix.cmake-build-type) || '' }}

      - name: Output compiler version
        run: cmake --build hylo/.cmake-build --target output_compiler_version -- --quiet&