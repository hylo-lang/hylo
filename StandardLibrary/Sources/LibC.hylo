/// Allocates `size` bytes of uninitialized storage whose alignment is specified by `alignment`.
///
/// - Parameters:
///   - alignment: The alignment of the allocated memory. Must be a valid alignment supported by
///     the implementation.
///   - size: The number of bytes to allocate. Must be an integral multiple of `alignment`.
@ffi("aligned_alloc")
fun aligned_alloc(_ alignment: Int, _ size: Int) -> MemoryAddress

/// Allocates `size` bytes of uninitialized storage.
@ffi("malloc")
fun malloc(_ size: Int) -> MemoryAddress

/// Deallocates the block of memory pointed at by `pointer`.
@ffi("free")
fun free(_ pointer: MemoryAddress)

/// Terminates the program abnormally.
@ffi("abort")
public fun abort() -> Never

@ffi("fdopen")
public fun fdopen(_ descriptor: Int, _ mode: MemoryAddress) -> MemoryAddress

/// Writes to `stream` the contents of `data`, which contains `count` elements of `size` bytes,
/// returning the number of elements written.
@ffi("fwrite")
public fun fwrite(_ data: MemoryAddress, _ size: Int, _ count: Int, _ stream: MemoryAddress) -> Int

/// Copies `count` elements from the object pointed to by `source` to the object pointed to by
/// `destination` and returns `destination`.
///
/// Both objects are reinterpreted as buffers of `Int8`.
///
/// If the objects overlap, the behavior is undefined. If either `source` or `destination` is
/// invalid or null, the behavior is undefined.
@ffi("memcpy")
public fun memcpy(
  _ destination: MemoryAddress, _ source: MemoryAddress, _ count: Int
) -> MemoryAddress

/// Copies `count` elements from the object pointed to by `source` to the object pointed to by
/// `destination` and returns `destination`.
///
/// Both objects are reinterpreted as buffers of `Int8`.
///
/// Objects may overlap: copying takes place as if the elements from `source` were copied to a
/// temporary buffer and then copied to `destination`. If either `source` or `destination` is
/// invalid or null, the behavior is undefined.
@ffi("memmove")
public fun memmove(
  _ destination: MemoryAddress, _ source: MemoryAddress, _ count: Int
) -> MemoryAddress


/// Get system configuration for `name` at run time.
///
/// See https://www.man7.org/linux/man-pages/man3/sysconf.3.html.
@ffi("sysconf")
internal fun sysconf(name: c_int) -> c_long

/// Give the current thread time slice back to the OS scheduler.
///
/// The thread is moved to the end of the queue for its static priority and a new thread gets to run.
///
/// See: https://www.man7.org/linux/man-pages/man2/sched_yield.2.html
@ffi("sched_yield")
internal fun sched_yield() -> c_int
