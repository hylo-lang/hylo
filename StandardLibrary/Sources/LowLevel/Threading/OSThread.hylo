/// Value used to represent "not a valid thread".
private let invalid_thread_id: pthread_t = 0xffffffffffffffff

/// The type of a thread function, equivalent C function pointer.
///
/// We aim at representing the C function pointer type `void (*)(void*)`.
/// As the parameter is already type erased, we can represent it as `void (*)(void**)`; this maps
/// to `[](MemoryAddress) -> Void` in Hylo.
///
/// We provide initializers for the following types:
///   - `sink []() -> Void` -- it is compatible with our function pointer type, as this lambda
///     does not access the parameter.
///   - `sink [](A) -> Void` -- it is equivalent to our type at LLVM level.
///   - `sink [](inout A) -> Void` -- it is equivalent to our type at LLVM level.
internal type ThreadFunction: Movable, Deinitializable {

  /// The type-erased function type.
  typealias TypeErasedFuncionType = [](MemoryAddress) -> Void

  /// Storage for our function pointer.
  var type_erased: TypeErasedFuncionType

  /// Initializes `self` with `f`.
  internal init(_ f: sink []() -> Void) {
    &self.type_erased = type_erase(&f)
  }

  /// Initializes `self` with `f`.
  internal init<A>(_ f: sink [](A) -> Void) {
    &self.type_erased = type_erase(&f)
  }

  /// Initializes `self` with `f`.
  internal init<A>(_ f: sink [](inout A) -> Void) {
    &self.type_erased = type_erase(&f)
  }

  /// Type erases `f` transforming it into a `TypeErasedFuncionType`; works for our supported closure types.
  private static fun type_erase<Closure>(_ f: inout Closure) -> TypeErasedFuncionType {
    return PointerToMutable<TypeErasedFuncionType>(type_punning: mutable_pointer[to: &f]).unsafe_pointee()
  }

  /// Returns a raw pointer from `self`.
  internal fun as_raw_pointer() -> MemoryAddress {
    return Pointer<MemoryAddress>(type_punning: pointer[to: type_erased]).unsafe[].copy()
  }

}


/// Encapsulates an operating system thread.
public type OSThread: Regular {

  /// The ID of the thread.
  var id: pthread_t

  /// Creates an instance with the given properties.
  internal memberwise init

  /// Creates an instance corresponding to an invalid thread.
  public init() {
    &id = invalid_thread_id.copy()
  }

  /// Deinitializes `self`.
  public fun deinit() {
    precondition(id < 0, "Thread is not joined before destruction.")
  }

  /// Spawn a new thread with `stack` bytes of stack space, executing `function_ptr`, and passing the value `a` as an argument.
  /// - Requires: `stack >= 0`.
  public static fun spawn_thread(
      stack: Int,
      executing function: ThreadFunction,
      with_argument a: MemoryAddress
    ) -> OSThread {
    #if os(Linux) || os(macOS)
      // TODO: improve error handling
      var thread_id: pthread_t = invalid_thread_id.copy()
      var attr: pthread_attr_t = .new()
      let pattr = mutable_pointer[to: &attr]
      if pthread_attr_init(pattr) != 0 { return .new() }
      if stack > 0 {
        if pthread_attr_setstacksize(pattr, C.size_t(truncating_or_extending: stack)) != 0 { return .new() }
      }
      if pthread_create(mutable_pointer[to: &thread_id], pattr, function.as_raw_pointer(), a) != 0 { return .new() }

      return .new(id: thread_id)
    #else
      return .new()
    #endif
  }

  /// Gives the current thread time slice back to the OS scheduler.
  public fun yield_now() {
    #if os(Linux) || os(macOS)
      _ = sched_yield()
    #endif
  }

  /// Joins the thread, waiting for it to finish and deinitializes `self`.
  public fun join() sink {
    #if os(Linux) || os(macOS)
      precondition(id >= 0, "Thread is not running while attempting to join it.")
      // TODO: handle errors.
      // TODO: handle return vales from the thread.
      var ret: MemoryAddress = .null()
      let _ = pthread_join(id, mutable_pointer[to: &ret])
      let _ = pthread_detach(id)
      &id = invalid_thread_id.copy()
    #endif
  }

  /// Returns the identifier of the thread.
  public fun id() -> pthread_t {
    self.id.copy()
  }

  /// Returns the number of available processors, and `0` if we cannot find the number of processors.
  public static fun available_parallelism() -> Int {
    #if os(Linux)
      let _SC_NPROCESSORS_ONLN: C.int = 84
    #elseif os(macOS)
      let _SC_NPROCESSORS_ONLN: C.int = 58
    #endif
    #if os(Linux) || os(macOS)
      let r = sysconf(name: _SC_NPROCESSORS_ONLN)
      if r >= 0 {
        return Int(truncating_or_extending: r)
      }
    #endif
    return 0
  }

}
