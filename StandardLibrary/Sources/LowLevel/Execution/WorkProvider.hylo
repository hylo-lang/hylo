/// A pointer to a task.
public typealias TaskPointer = PointerToMutable<TaskBase>

/// The basic task type.
///
/// This holds necessary information to encapsulate a task, and chain it with other tasks.
public type TaskBase: Deinitializable {

  /// The function that will be executed when the task is run.
  internal var task_function: [](TaskPointer) -> Void
  /// The next task in the chain.
  internal var next: TaskPointer
  /// Pointer to the link from the previous task to the current task.
  /// This is used to remove the task from the chain.
  internal var previous_link: PointerToMutable<TaskPointer>

  /// Initializes `self` with `f`.
  public init(executing f: sink [](TaskPointer) -> Void) {
    &self.task_function = f
    &self.next = .null()
    &self.previous_link = .null()
  }

  /// Executes the task.
  public fun execute() inout {
    let p = mutable_pointer[to: &self]
    task_function(p.copy())
  }

}

/// Represents a provide of work items.
///
/// Instances of this trait will be used by the worker threads to get the next work item to execute.
public trait WorkProvider: Movable, Deinitializable {

  /// Returns the next work item to be executed.
  public fun next_work_item(worker_index: Int) inout -> TaskPointer

}

