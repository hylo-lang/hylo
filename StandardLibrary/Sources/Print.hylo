/// Writes the textual representation of `item` to the standard output.
public fun print(_ item: String, terminator: String = "\n") {
  let o = stdout
  _ = fwrite(item.utf8.nullterminated.raw, 1, item.utf8.count(), o)
  _ = fwrite(terminator.utf8.nullterminated.raw, 1, terminator.utf8.count(), o)
}

/// Writes the textual representation of `item` to the standard output.
public fun print<T>(_ item: PointerToMutable<T>, terminator: String = "\n") {
  let address = Int(bit_pattern: MemoryAddress(type_punning: item))
  print("0x", terminator: "")
  print(address, radix: 16, terminator: terminator)
}

/// Writes the textual representation of `item` to the standard output.
public fun print<T>(_ item: Pointer<T>, terminator: String = "\n") {
  let address = Int(bit_pattern: MemoryAddress(type_punning: PointerToMutable<T>(adding_mutation_to: item)))
  print("0x", terminator: "")
  print(address, radix: 16, terminator: terminator)
}

/// Writes the textual representation of `item` to the standard output.
public fun print(_ item: Int, radix: Int = 10, terminator: String = "\n") {
  if item == 0 {
    print("0", terminator: terminator)
    return
  }

  var a = Array<Int8>()
  var v = item.abs()

  while v != 0 {
    let i = v % radix
    &v /= radix
    // Note: 48 = "0" and 97 = "a"
    &a.append((Int8(truncating_or_extending: i + if i < 10 { 48 } else { 87 })))
  }

  // Note: 45 = "-"
  if item < 0 { &a.append(45) }
  &a.reverse()

  let o = stdout
  _ = fwrite(a.contiguous_storage.raw, 1, a.count(), o)
  _ = fwrite(terminator.utf8.nullterminated.raw, 1, terminator.utf8.count(), o)
}

/// The standard output of the current process.
let stdout = fdopen(1, "w".utf8.nullterminated.raw)
