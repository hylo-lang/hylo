/// Projects `value` with its memory representation reinterpreted as a value of type `U`.
public subscript unsafe_bitcast<T, U>(_ value: T): U {
  let {
    sink let p: Pointer<U> = Pointer(type_punning: pointer[to: value])
    yield p.unsafe[]
  }
  inout {
    sink let p: PointerToMutable<U> = PointerToMutable(type_punning: mutable_pointer[to: &value])
    yield &p.unsafe[]
  }
}

/// Returns `value` with its memory representation reinterpreted as a value of type `U`.
public fun unsafe_bitcast<T, U: Movable>(consuming value: T) -> U {
  sink let p: PointerToMutable<U> = PointerToMutable(type_punning: mutable_pointer[to: &value])
  return p.unsafe_pointee()
}
