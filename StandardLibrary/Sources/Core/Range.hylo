/// A half-open interval from a lower bound up to, but not including, an upper bound.
public type Range<Bound: SemiRegular> {

  // TODO: private(set)
  /// The minimum value included in `self`.
  public var lower_bound: Bound

  // TODO: private(set)
  /// The minimum value greater than `lower_bound` but not included in `self`.
  public var upper_bound: Bound

  /// Creates an instance with the given properties.
  memberwise init

  /// Creates a half-open interval [`lower_bound`, `upper_bound`).
  /// - Requires: `lower_bound <= upper_bound` if `Bound` models `Comparable`.
  public init(from lower_bound: sink Bound, up_to upper_bound: sink Bound) {
    &self.lower_bound = lower_bound
    &self.upper_bound = upper_bound
  }

  /// Returns true iff `lower_bound == upper_bound`.
  public fun is_empty() -> Bool {
    lower_bound == upper_bound
  }

}

public extension Range where Bound: Comparable {

  /// Returns `true` iff `x` is contained in `self`.
  public fun contains(_ x: Bound) -> Bool {
    (x >= lower_bound) && (x < upper_bound)
  }

  /// Returns `true` iff `other` is contained in `self`.
  public fun contains(_ other: Self) -> Bool {
    (other.lower_bound >= self.lower_bound) && (other.upper_bound <= self.upper_bound)
  }

}

public conformance Range: Deinitializable {}

public conformance Range: Movable {}

public conformance Range: Equatable {

  public fun infix== (_ other: Self) -> Bool {
    (self.lower_bound == other.lower_bound) && (self.upper_bound == other.upper_bound)
  }

}

public conformance Range: Iterator where
  Bound: Strideable, Bound: Copyable,
  Bound.Stride: SignedInteger, Bound.Stride: Deinitializable
{

  public typealias Element = Bound

  public fun next() inout -> Optional<Bound> {
    if lower_bound == upper_bound { return .none() }
    let r = lower_bound.copy()
    &lower_bound = lower_bound.advance(by: .zero().successor())
    return r as _
  }

}
