/// A collection of elements accessible via an indexed subscript.
public trait Collection {

  /// The type of the elements contained in `Self`.
  type Element

  /// The type of the positions in `Self`.
  type Position: Regular

  /// Returns the position of the first element in `self`, or `end_position()` if `self` is empty.
  fun start_position() -> Position

  /// Returns the "past the end" position in `self`, that is, the position immediately after the
  /// last element in `self`.
  fun end_position() -> Position

  /// Returns the position immediately after `i`.
  ///
  /// - Requires: `i != end_position()`.
  fun position(after i: Position) -> Position

  /// Accesses the element at position `i`.
  ///
  /// - Requires: `i` is a valid position in `self` different from `end_position()`.
  subscript(_ i: Position): Element { let }

}

public extension Collection {

  /// Returns the result of applying `combine` on an accumulator, initialized with `initial_value`,
  /// and each element of `self`, in order.
  ///
  /// - Complexity: O(n), where n is the number of elements in `self`.
  public fun reduce<E, T: Movable>(
    _ accumulator: sink T,
    _ combine: [E](sink T, Element) -> T
  ) -> T {
    for let e in self {
      &accumulator = combine(accumulator, e)
    }
    return accumulator
  }

  /// Returns `true` iff `self` contains an element satisfying `predicate`.
  ///
  /// - Complexity: O(n), where n is the number of elements in `self`.
  public fun contains<E>(where predicate: [E](Element) -> Bool) -> Bool {
    for let e in self {
      if predicate(e) { return true }
    }
    return false
  }

  /// Returns `true` iff all elements in `self` satisfy `predicate`.
  ///
  /// - Complexity: O(n), where n is the number of elements in `self`.
  public fun all_satisfy<E>(_ predicate: [E](Element) -> Bool) -> Bool {
    for let e in self {
      if !predicate(e) { return false }
    }
    return true
  }

}
