/// Either an instance of `T` or the absence thereof.
///
/// Use `Optional` when you need to represent a value that may or may not be present.
public typealias Optional<T> = Union<T, None<T>>

/// The absence of an instance of `T`.
public type None<T>: Regular {

  /// Creates a value denoting the absence of an instance of `T`.
  public memberwise init

}

public extension Optional {

  /// Returns a value denoting the absence of an instance.
  public static fun none() -> Self {
    None() as Optional
  }

  /// Returns `true` iff `self` is equal to `.none()`.
  public fun is_empty() -> Bool {
    if let _: T = self { false } else { true }
  }

  /// Returns an optional containing the result of calling `transform` on the value wrapped in
  /// `self` or `.none()` is `self` is empty.
  public fun map<E, R>(_ transform: inout [E](T) -> R) -> Optional<R> {
    if let w? = self { transform(w) as _ } else { .none() }
  }

}

public extension Optional where T: Movable {

  /// Returns the value wrapped in `self` or stops execution if `self` is empty.
  ///
  /// - Requires: `self` is not empty.
  public fun postfix!() sink -> T {
    if sink let r? = self {
      return r
    } else {
      fatal_error("optional is empty")
    }
  }

  /// Returns the value wrapped in `self` and assigns it to `.none()`.
  ///
  /// - Requires: `self` is not empty.
  public fun release() inout -> T {
    sink let wrapped = self!
    &self = .none()
    return wrapped
  }

}

// Note: We can't declare confitional conformance of `Optional` to "umbrella traits" yet without
// causing ambiguities. See #1566

public conformance Optional: Deinitializable where T: Deinitializable {}

public conformance Optional: Equatable where T: Equatable {}
