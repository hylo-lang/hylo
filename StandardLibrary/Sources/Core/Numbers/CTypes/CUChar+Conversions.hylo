public extension Int8 {
    public init(fromC n: CUChar) {
        // assert(n >= Int8.min() && n <= Int8.max())
        &self = Int8(value: Builtin.fromcint_cuchar_i8(n.value))
    }
}
public extension UInt8 {
    public init(fromC n: CUChar) {
        // assert(n >= 0 && n <= UInt8.max())
        &self = UInt8(value: Builtin.fromcint_cuchar_i8(n.value))
    }
}

// todo assertions below...
public extension Int32 {
    public init(fromC n: CUChar) {
        // assert(n >= Int32.min() && n <= Int32.max())
        &self = Int32(value: Builtin.fromcint_cuchar_i32(n.value))
    }
}
public extension UInt32 {
    public init(fromC n: CUChar) {
        // assert(n >= 0 && n <= UInt32.max())
        &self = UInt32(value: Builtin.fromcint_cuchar_i32(n.value))
    }
}
public extension Int64 {
    public init(fromC n: CUChar) {
        // assert(n >= Int64.min() && n <= Int64.max())
        &self = Int64(value: Builtin.fromcint_cuchar_i64(n.value))
    }
}
public extension UInt64 {
    public init(fromC n: CUChar) {
        // assert(n >= 0 && n <= UInt64.max())
        &self = UInt64(value: Builtin.fromcint_cuchar_i64(n.value))
    }
}
public extension Int {
    public init(fromC n: CUChar) {
        // assert(n >= Int.min() && n <= Int.max())
        &self = Int(value: Builtin.fromcint_cuchar_word(n.value))
    }
}
public extension UInt {
    public init(fromC n: CUChar) {
        // assert(n >= 0 && n <= UInt.max())
        &self = UInt(value: Builtin.fromcint_cuchar_word(n.value))
    }
}


public extension CUChar {
    public init(_ n: UInt8) {
        // assert (n <= UInt8(self.max()))
        &self = CUChar(value: Builtin.tocint_u_i8_cuchar(n.value))
    }

    public init(_ n: Int8) {
        // assert (n >= 0)
        &self = CUChar(value: Builtin.tocint_s_i8_cuchar(n.value))
    }

    public init(_ n: UInt32) {
        // assert (n <= UInt32(self.max()))
        &self = CUChar(value: Builtin.tocint_u_i32_cuchar(n.value))
    }

    public init(_ n: Int32) {
        // assert (n >= 0 && n <= Int32(self.max()))
        &self = CUChar(value: Builtin.tocint_s_i32_cuchar(n.value))
    }

    public init(_ n: UInt64) {
        // assert (n <= UInt64(self.max()))
        &self = CUChar(value: Builtin.tocint_u_i64_cuchar(n.value))
    }
    
    public init(_ n: Int64) {
        // assert (n >= 0 && n <= Int64(self.max()))
        &self = CUChar(value: Builtin.tocint_s_i64_cuchar(n.value))
    }
    
    public init(_ n: UInt) {
        // assert (n <= UInt(self.max()))
        &self = CUChar(value: Builtin.tocint_u_word_cuchar(n.value))
    }
    
    public init(_ n: Int) {
        // assert (n >= 0 && n <= Int(self.max()))
        &self = CUChar(value: Builtin.tocint_s_word_cuchar(n.value))
    }
}