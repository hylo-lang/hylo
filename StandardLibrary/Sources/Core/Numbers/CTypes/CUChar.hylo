public type CUChar {
    internal var value: Builtin.cuchar
    internal memberwise init

    public static fun min() -> Self {
        0
    }
    public static fun max() -> Self {
        255 // todo CUChar(value: Builtin.int_cuchar_max())
    }
}

public conformance CUChar: ExpressibleByIntegerLiteral {}
public conformance CUChar: Deinitializable {}
public conformance CUChar: Movable {}
public conformance CUChar: Copyable {
    public fun copy() -> Self {
        CUChar(value: value)
    }
}

public conformance CUChar: Equatable {

  public fun infix== (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_eq_cuchar(value, other.value))
  }

  public fun infix!= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_ne_cuchar(value, other.value))
  }

}

public conformance CUChar: ForeignConvertible {

  public typealias ForeignRepresentation = Builtin.cuchar

  public init(foreign_value: sink Builtin.cuchar) {
    &self.value = foreign_value
  }

  public fun foreign_value() -> Builtin.cuchar {
    return value
  }

}