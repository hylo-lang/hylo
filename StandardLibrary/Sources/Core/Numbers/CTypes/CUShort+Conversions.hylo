public extension Int8 {
    public init(truncating_or_extending n: CUShort) {
        // assert(n <= Int8.max())
        &self = Int8(value: Builtin.fromcint_cushort_i8(n.value))
    }
}
public extension UInt8 {
    public init(truncating_or_extending n: CUShort) {
        // assert(n <= UInt8.max())
        &self = UInt8(value: Builtin.fromcint_cushort_i8(n.value))
    }
}
public extension Int32 {
    public init(truncating_or_extending n: CUShort) {
        &self = Int32(value: Builtin.fromcint_cushort_i32(n.value))
    }
}
public extension UInt32 {
    public init(truncating_or_extending n: CUShort) {
        &self = UInt32(value: Builtin.fromcint_cushort_i32(n.value))
    }
}
public extension Int64 {
    public init(truncating_or_extending n: CUShort) {
        &self = Int64(value: Builtin.fromcint_cushort_i64(n.value))
    }
}
public extension UInt64 {
    public init(truncating_or_extending n: CUShort) {
        &self = UInt64(value: Builtin.fromcint_cushort_i64(n.value))
    }
}
public extension Int {
    public init(truncating_or_extending n: CUShort) {
        &self = Int(value: Builtin.fromcint_cushort_word(n.value))
    }
}
public extension UInt {
    public init(truncating_or_extending n: CUShort) {
        &self = UInt(value: Builtin.fromcint_cushort_word(n.value))
    }
}

public extension CUShort {
    public init(_ n: UInt8) {
        &self = CUShort(value: Builtin.tocint_u_i8_cushort(n.value))
    }

    public init(_ n: Int8) {
        // assert (n >= 0)
        &self = CUShort(value: Builtin.tocint_s_i8_cushort(n.value))
    }

    public init(_ n: UInt32) {
        // assert (n <= UInt32(self.max()))
        &self = CUShort(value: Builtin.tocint_u_i32_cushort(n.value))
    }

    public init(_ n: Int32) {
        // assert (n >= 0 && n <= Int32(self.max()))
        &self = CUShort(value: Builtin.tocint_s_i32_cushort(n.value))
    }

    public init(_ n: UInt64) {
        // assert (n <= UInt64(self.max()))
        &self = CUShort(value: Builtin.tocint_u_i64_cushort(n.value))
    }

    public init(_ n: Int64) {
        // assert (n >= 0 && n <= Int64(self.max()))
        &self = CUShort(value: Builtin.tocint_s_i64_cushort(n.value))
    }

    public init(_ n: UInt) {
        // assert (n <= UInt(self.max()))
        &self = CUShort(value: Builtin.tocint_u_word_cushort(n.value))
    }

    public init(_ n: Int) {
        // assert (n >= 0 && n <= Int(self.max()))
        &self = CUShort(value: Builtin.tocint_s_word_cushort(n.value))
    }
}