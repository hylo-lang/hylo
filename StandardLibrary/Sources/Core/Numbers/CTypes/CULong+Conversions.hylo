public extension Int8 {
    public init(truncating_or_extending n: CULong) {
        // assert(n <= Int8.max())
        &self = Int8(value: Builtin.fromcint_culong_i8(n.value))
    }
}
public extension UInt8 {
    public init(truncating_or_extending n: CULong) {
        // assert(n <= UInt8.max())
        &self = UInt8(value: Builtin.fromcint_culong_i8(n.value))
    }
}
public extension Int32 {
    public init(truncating_or_extending n: CULong) {
        // assert(n <= Int32.max())
        &self = Int32(value: Builtin.fromcint_culong_i32(n.value))
    }
}
public extension UInt32 {
    public init(truncating_or_extending n: CULong) {
        // assert(n <= UInt32.max())
        &self = UInt32(value: Builtin.fromcint_culong_i32(n.value))
    }
}
public extension Int64 {
    public init(truncating_or_extending n: CULong) {
        // assert(n <= Int64.max())
        &self = Int64(value: Builtin.fromcint_culong_i64(n.value))
    }
}
public extension UInt64 {
    public init(truncating_or_extending n: CULong) {
        &self = UInt64(value: Builtin.fromcint_culong_i64(n.value))
    }
}
public extension Int {
    public init(truncating_or_extending n: CULong) {
        // assert(n <= Int.max())
        &self = Int(value: Builtin.fromcint_culong_word(n.value))
    }
}
public extension UInt {
    public init(truncating_or_extending n: CULong) {
        &self = UInt(value: Builtin.fromcint_culong_word(n.value))
    }
}

public extension CULong {
    public init(_ n: UInt8) {
        &self = CULong(value: Builtin.tocint_u_i8_culong(n.value))
    }

    public init(_ n: Int8) {
        // assert (n >= 0)
        &self = CULong(value: Builtin.tocint_s_i8_culong(n.value))
    }

    public init(_ n: UInt32) {
        &self = CULong(value: Builtin.tocint_u_i32_culong(n.value))
    }

    public init(_ n: Int32) {
        // assert (n >= 0)
        &self = CULong(value: Builtin.tocint_s_i32_culong(n.value))
    }

    public init(_ n: UInt64) {
        &self = CULong(value: Builtin.tocint_u_i64_culong(n.value))
    }

    public init(_ n: Int64) {
        // assert (n >= 0)
        &self = CULong(value: Builtin.tocint_s_i64_culong(n.value))
    }

    public init(_ n: UInt) {
        &self = CULong(value: Builtin.tocint_u_word_culong(n.value))
    }

    public init(_ n: Int) {
        // assert (n >= 0)
        &self = CULong(value: Builtin.tocint_s_word_culong(n.value))
    }
}