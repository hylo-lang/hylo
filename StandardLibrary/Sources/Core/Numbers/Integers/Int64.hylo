/// A 64-bit signed integer value.
public type Int64: Regular {

  internal var value: Builtin.i64

  internal memberwise init

  /// Creates an instance with the same memory representation as `other`.
  public init(bit_pattern other: UInt64) {
    &self.value = other.value
  }

  /// Creates a copy of `other`.
  ///
  /// - Requires: The value of `other` must be representable in this type.
  public init(_ other: Int) {
    &self.value = Builtin.trunc_word_i64(other.value)
  }

  /// Returns the absolute value of `self`.
  public fun abs() -> Int64 {
    if self < 0 { -self } else { +self }
  }

  /// Returns `self`.
  public fun prefix+ () -> Self {
    self.copy()
  }

  /// Returns the bitwise inverse of `self`.
  public fun prefix~ () -> Self {
    self ^ -1
  }

}

public conformance Int64: ExpressibleByIntegerLiteral {}

public conformance Int64: Copyable {

  public fun copy() -> Self {
    Int64(value: value)
  }

}

public conformance Int64: Equatable {

  public fun infix== (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_eq_i64(value, other.value))
  }

  public fun infix!= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_ne_i64(value, other.value))
  }

}

public conformance Int64: Hashable {

  public fun hash(into hasher: inout Hasher) {
    &hasher.combine(i64: self)
  }

}

public conformance Int64: Comparable {

  public fun infix< (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_slt_i64(value, other.value))
  }

  public fun infix<= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_sle_i64(value, other.value))
  }

  public fun infix> (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_sgt_i64(value, other.value))
  }

  public fun infix>= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_sge_i64(value, other.value))
  }

}

public conformance Int64: AdditiveArithmetic {

  public fun infix+ (_ other: Self) -> Self {
    Int64(value: Builtin.add_i64(value, other.value))
  }

  public fun infix+= (_ other: Self) inout {
    &self.value = Builtin.add_i64(value, other.value)
  }

  public fun infix- (_ other: Self) -> Self {
    Int64(value: Builtin.sub_i64(value, other.value))
  }

  public fun infix-= (_ other: Self) inout {
    &self.value = Builtin.sub_i64(value, other.value)
  }

  public static fun zero() -> Self {
    0
  }

}

public conformance Int64: Numeric {

  public typealias Magnitude = UInt64

  public fun magnitude() -> UInt64 {
    UInt64(bit_pattern: self)
  }

  public fun infix* (_ other: Self) -> Self {
    Int64(value: Builtin.mul_i64(value, other.value))
  }

  public fun infix*= (_ other: Self) inout {
    &self.value = Builtin.mul_i64(value, other.value)
  }

}

public conformance Int64: SignedNumeric {

  public fun prefix- () -> Self {
    Int64() - self
  }

  public fun negate() inout {
    &self = -self
  }

}

public conformance Int64: BinaryInteger {

  public init() {
    &self.value = Builtin.zeroinitializer_i64()
  }

  public init<T: BinaryInteger>(truncating_or_extending source: T) {
    let w = source.words()
    &self.value = Builtin.trunc_word_i64(w[w.start_position()].value)
  }

  public fun instance_bit_width() -> Int {
    64
  }

  public fun signum() -> Int {
    (if self > 0 { 1 } else { 0 }) - (if self < 0 { 1 } else { 0 })
  }

  public fun trailing_zeros() -> Int {
    Int(value: Builtin.zext_i64_word(Builtin.cttz_i64(value)))
  }

  public fun quotient_and_remainder(dividing_by other: Self) -> {quotient: Self, remainder: Self} {
    (quotient: self / other, remainder: self % other)
  }

  public fun words() -> CollectionOfOne<UInt> {
    // TODO: Handle the case where Int64 is larger than UInt.
    CollectionOfOne(UInt(value: Builtin.sext_i64_word(value)))
  }

  public fun infix/ (_ other: Self) -> Self {
    Int64(value: Builtin.sdiv_i64(value, other.value))
  }

  public fun infix/= (_ other: Self) inout {
    &self.value = Builtin.sdiv_i64(value, other.value)
  }

  public fun infix% (_ other: Self) -> Self {
    Int64(value: Builtin.srem_i64(value, other.value))
  }

  public fun infix%= (_ other: Self) inout {
    &self.value = Builtin.srem_i64(value, other.value)
  }

  public fun infix& (_ other: Self) -> Self {
    Int64(value: Builtin.and_i64(value, other.value))
  }

  public fun infix&= (_ other: Self) inout {
    &self.value = Builtin.and_i64(value, other.value)
  }

  public fun infix| (_ other: Self) -> Self {
    Int64(value: Builtin.or_i64(value, other.value))
  }

  public fun infix|= (_ other: Self) inout {
    &self.value = Builtin.or_i64(value, other.value)
  }

  public fun infix^ (_ other: Self) -> Self {
    Int64(value: Builtin.xor_i64(value, other.value))
  }

  public fun infix^= (_ other: Self) inout {
    &self.value = Builtin.xor_i64(value, other.value)
  }

  public fun infix<< (_ n: Int) -> Self {
    if n >= 0 {
      return if n < Self.bit_width() { self &<< n } else { 0 }
    } else if n <= -Self.bit_width() {
      return self &>> (Self.bit_width() - 1)
    } else {
      return self &>> -n
    }
  }

  public fun infix<<= (_ n: Int) inout {
    &self = self << n
  }

  public fun infix>> (_ n: Int) -> Self {
    if n >= 0 {
      return if n < Self.bit_width() { self &>> n } else { self &>> (Self.bit_width() - 1) }
    } else if n <= -Self.bit_width() {
      return 0
    } else {
      return self &<< -n
    }
  }

  public fun infix>>= (_ n: Int) inout {
    &self = self >> n
  }

  public static fun is_signed() -> Bool {
    true
  }

}

public conformance Int64: SignedInteger {

  public fun successor() -> Self {
    self + 1
  }

}

public conformance Int64: FixedWidthInteger {

  public fun matches(_ mask: Self) -> Bool {
    (self & mask) == mask
  }

  public fun adding_reporting_overflow(_ other: Self) -> {partial_value: Self, overflow: Bool} {
    let r = Builtin.sadd_with_overflow_i64(value, other.value)
    return (partial_value: Int64(value: r.0), overflow: Bool(value: r.1))
  }

  public fun subtracting_reporting_overflow(
    _ other: Self
  ) -> {partial_value: Self, overflow: Bool} {
    let r = Builtin.ssub_with_overflow_i64(value, other.value)
    return (partial_value: Int64(value: r.0), overflow: Bool(value: r.1))
  }

  public fun multiplied_reporting_overflow(
    by other: Self
  ) -> {partial_value: Self, overflow: Bool} {
    let r = Builtin.smul_with_overflow_i64(value, other.value)
    return (partial_value: Int64(value: r.0), overflow: Bool(value: r.1))
  }

  public fun divided_reporting_overflow(by other: Self) -> {partial_value: Self, overflow: Bool} {
    if other == 0 {
      (partial_value: self.copy(), overflow: true)
    } else if (self == Self.min()) && (other == -1) {
      (partial_value: self.copy(), overflow: true)
    } else {
      (partial_value: Int64(value: Builtin.sdiv_i64(value, other.value)), overflow: false)
    }
  }

  public fun remainder_reporting_overflow(
    dividing_by other: Self
  ) -> {partial_value: Self, overflow: Bool} {
    if other == 0 {
      (partial_value: self.copy(), overflow: true)
    } else if (self == Self.min()) && (other == -1) {
      (partial_value: 0, overflow: true)
    } else {
      (partial_value: Int64(value: Builtin.srem_i64(value, other.value)), overflow: false)
    }
  }

  public fun nonzero_bit_count() -> Int {
    Int(value: Builtin.zext_i64_word(Builtin.ctpop_i64(value)))
  }

  public fun leading_zeros() -> Int {
    Int(value: Builtin.zext_i64_word(Builtin.ctlz_i64(value)))
  }

  public fun infix&<< (_ n: Int) -> Self {
    var lhs = self.copy()
    &lhs &<<= n
    return lhs
  }

  public fun infix&<<= (_ n: Int) inout {
    &self.value = Builtin.shl_i64(value, UInt64(truncating_or_extending: n).value)
  }

  public fun infix&>> (_ n: Int) -> Self {
    var lhs = self.copy()
    &lhs &>>= n
    return lhs
  }

  public fun infix&>>= (_ n: Int) inout {
    &self.value = Builtin.ashr_i64(value, UInt64(truncating_or_extending: n).value)
  }

  public static fun bit_width() -> Int {
    64
  }

  public static fun max() -> Self {
    9223372036854775807
  }

  public static fun min() -> Self {
    -9223372036854775808
  }

}

public conformance Int64: Strideable {

  public typealias Stride = Int64

  public fun offset(to other: Self) -> Int64 {
    other - self
  }

  public fun advance(by offset: Int64) -> Self {
    self + offset
  }

}
