/// A 32-bit signed integer value.
public type Int32 {

  var value: Builtin.i32

  memberwise init

  /// Creates an instance with value `0`.
  public init() {
    &self.value = Builtin.zeroinitializer_i32()
  }

  /// Creates a copy of `other`.
  ///
  /// - Requires: The value of `other` must be representable in this type.
  public init(_ other: Int) {
    &self.value = Builtin.trunc_word_i32(other.value)
  }

}

public conformance Int32: ExpressibleByIntegerLiteral {}

public conformance Int32: Deinitializable {}

public conformance Int32: Copyable {

  public fun copy() -> Self {
    Int32(value: value)
  }

}

public conformance Int32: Equatable {

  public fun infix== (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_eq_i32(value, other.value))
  }

  public fun infix!= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_ne_i32(value, other.value))
  }

}

public conformance Int32: Hashable {

  public fun hash(into hasher: inout Hasher) {
    let p = Pointer<Int8>(type_punning: pointer[to: self])
    &hasher.combine(byte: p.unsafe[])
    &hasher.combine(byte: p.advance(by: 1).unsafe[])
    &hasher.combine(byte: p.advance(by: 2).unsafe[])
    &hasher.combine(byte: p.advance(by: 3).unsafe[])
  }

}
