/// A future that cannot escape the local scope.
public type Future<E: Movable & Deinitializable> {

  // TODO
  public typealias Result = Int

  /// The underlying frame object that is used to connect the spawned computation with the await point.
  private var frame: SpawnFrame<E>

  /// Initializes `self` with `f`, and spawns the computation.
  public init(_ f: sink [E]() -> Int) {
    SpawnFrame<E>.`init`(self: &self.frame, f)
  }

  /// Awaits the result of the computation.
  ///
  /// - Note: May return on a different OS thread than the one that called this.
  public fun await() sink -> Result {
    return self.frame.await()
  }

}

/// A future that can escape the local scope.
public type EscapingFuture<E: Movable & Deinitializable>: Deinitializable, Movable {

  // TODO
  public typealias Result = Int

  /// The underlying frame object that is used to connect the spawned computation with the await point.
  private var frame: PointerToMutable<SpawnFrame<E>>

  /// Initializes `self` with `f`, and spawns the computation.
  public init(_ f: sink [E]() -> Int) {
    &self.frame = SpawnFrame<E>.allocate(f)
  }

  /// Awaits the result of the computation.
  ///
  /// - Note: May return on a different OS thread than the one that called this.
  public fun await() sink -> Result {
    let r = (&frame.unsafe[]).await()
    frame.deallocate()
    return r
  }

}

/// Describes the frame needed to spawn a computation.
///
/// This object will be shared between the spawned computation (e.g., as it will store the result
/// here), and the await call (e.g., to extract the result from here).
internal type SpawnFrame<E: Movable & Deinitializable>: Deinitializable {

  /// The base frame object needed by the underlying implementation.
  private var base_frame: SpawnFrameBase

  /// What needs to be called to produce the value in the future.
  private var f: [E]() -> Int

  /// The result of the computation.
  private var r: Optional<Int>

  /// Initializes `self` with `f`, and spawns the computation.
  internal init(_ f: sink [E]() -> Int) {
    &self.base_frame = .new()
    &self.f = f
    &self.r = .none()

    let local_f = fun (_ frame: inout SpawnFrameBase) -> Void {
      var this = PointerToMutable<Self>(type_punning: mutable_pointer[to: &frame])
      &this.unsafe[].r = this.unsafe[].f() as _
    }
    concore2full_spawn2(&self.base_frame, local_f)
  }

  /// Awaits the result of the computation.
  ///
  /// - Note: May return on a different OS thread than the one that called this.
  internal fun await() inout -> Int {
    concore2full_await(self.base_frame)
    if let r: Int = self.r {
      let copy = r.copy()
      &self.r = .none()
      return copy
    } else {
      fatal_error()
    }
  }

  /// Allocate an object of `Self` on the heap and initialize it with `f`.
  internal static fun allocate(_ f: sink [E]() -> Int) -> PointerToMutable<Self> {
    let p: PointerToMutable<Self> = .allocate(count: 1)
    Self.`init`(self: &p.unsafe[], f)
    return p
  }

}

/// Describes the frame needed to spawn a computation.
///
/// Needs to have the same size and the same alignment as the C implementation.
/// That is, 10 pointers, with the alignment of a pointer.
public type SpawnFrameBase: Deinitializable, Movable {

  let p1: MemoryAddress
  let p2: MemoryAddress
  let p3: MemoryAddress
  let p4: MemoryAddress
  let p5: MemoryAddress
  let p6: MemoryAddress
  let p7: MemoryAddress
  let p8: MemoryAddress
  let p9: MemoryAddress
  let p10: MemoryAddress

  public init() {
    &self.p1 = .null()
    &self.p2 = .null()
    &self.p3 = .null()
    &self.p4 = .null()
    &self.p5 = .null()
    &self.p6 = .null()
    &self.p7 = .null()
    &self.p8 = .null()
    &self.p9 = .null()
    &self.p10 = .null()
  }

}

// @external("concore2full_spawn")
// fun concore2full_spawn(_ frame: set SpawnFrameBase, _ f: Int); // TODO: f is a pointer to a function

/// Spawns the execution of `f` using control data `frame`.
@external("concore2full_spawn2")
internal fun concore2full_spawn2(_ frame: set SpawnFrameBase, _ f: [](inout SpawnFrameBase) let -> Void);

/// Awaits the completion of the computation started in `frame`.
@external("concore2full_await")
internal fun concore2full_await(_ frame: SpawnFrameBase);
