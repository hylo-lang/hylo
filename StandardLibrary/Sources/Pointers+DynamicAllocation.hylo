public extension PointerToMutable where Pointee == Never {

  /// Allocates memory for `count` bytes at given `alignment`.
  public static fun allocate_bytes(count: Int, aligned_at alignment: Int) -> Self {
    Self.new(base: hylo_aligned_alloc(alignment, count).base)
  }

}

public extension PointerToMutable {

  /// Allocates memory for `count` instances of `Pointee`.
  public static fun allocate(count: Int) -> Self {
    return Self.new(base: hylo_aligned_alloc(
      MemoryLayout<Pointee>.alignment(),
      MemoryLayout<Pointee>.stride() * count).base)
  }

  /// Deallocates the memory previously allocated at `self`.
  public fun deallocate() {
    hylo_aligned_free(MemoryAddress(base: base))
  }

}
