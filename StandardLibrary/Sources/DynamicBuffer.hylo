/// A buffer of elements stored in a contiguous region of memory, whose size is determined at
/// instance creation.
///
/// - Warning: The deinitializer of `DynamicBuffer` does not deinitialize the elements that may
///   be stored in its payload. You must ensure that they are properly deinitialized before
///   `deinit` is called.
public type DynamicBuffer<Header: Deinitializable, Element>: Deinitializable, Movable {

  /// The description of payloads in `DynamicBuffer`s.
  typealias BufferHeader = {
    capacity: Int,
    payload_header: Header
  }

  /// Returns the number of bytes from a base pointer to the payload in instances of `Self`.
  static fun payload_offset() -> Int {
    let a = MemoryLayout<Element>.alignment()
    let s = MemoryLayout<BufferHeader>.size()
    return s + (a - s) % a
  }

  /// A pointer to the base of the buffer's out-of-line storage.
  ///
  /// A null value denotes an empty buffer. Otherwise, `storage` points at an instance of
  /// `BufferHeader` that is followed by a region capable of storing at most `self.capacity`
  /// instances of `Element`, offset to satisfy `Element`'s alignment requirement'.
  var storage: MemoryAddress

  /// Creates an empty instance.
  public init() {
    &storage = .null()
  }

  /// Creates an instance for storing `capacity` instances of `Element` and calls `init_header`
  /// to initialize a `Header`.
  public init<E>(
    capacity: Int,
    initializing_header_with init_header: [E](set Header) -> Void
  ) {
    &storage = .allocate_bytes(
      count: Self.payload_offset() + capacity * MemoryLayout<Element>.stride(),
      aligned_at: MemoryLayout<BufferHeader>.alignment())

    let p = PointerToMutable<BufferHeader>(type_punning: storage)
    p.unsafe_initialize_pointee(fun (_ h: set BufferHeader) -> Void {
      &h.0 = capacity.copy()
      init_header(&h.1)
    })
  }

  /// Returns the address of the initial element.
  ///
  /// - Requires: `capacity() > 0`.
  public fun first_element_address() -> PointerToMutable<Element> {
    // TODO: Uncomment the following line when #995 is fixed
    // precondition(self.capacity() > 0)
    PointerToMutable<Element>(type_punning: storage.advance(by: payload_offset()))
  }

  /// Deinitializes `self`.
  ///
  /// - Requires: No element is stored in `self`.
  public fun deinit() sink {
    storage.deallocate()
  }

  /// The number of elements that can be stored in `self`.
  public fun capacity() -> Int {
    if storage == PointerToMutable.null() {
      return 0
    }

    let p = PointerToMutable<BufferHeader>(type_punning: storage)
    return p.unsafe[].0.copy()
  }

  /// Accesses the header of `self`.
  ///
  /// - Requires: `capacity() > 0`.
  public property header: Header {
    let { buffer_header().unsafe[].1 }
    inout { &buffer_header().unsafe[].1 }
  }

  /// Returns the address of the `self`'s header.
  fun buffer_header() -> PointerToMutable<BufferHeader> {
    PointerToMutable<BufferHeader>(type_punning: storage)
  }

}
