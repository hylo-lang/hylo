//- compileAndRun expecting: .success

conformance Int: Collection {

  public typealias Element = Bool
  public typealias Position = Int

  public fun start_position() -> Int { 0 }
  public fun end_position() -> Int { Int.bit_width() }
  public fun position(after p: Int) -> Int { p + 1 }

  public subscript(_ p: Int): Bool { (self & (1 << p)) != 0 }

}

fun test_count() {
  let a = 0
  precondition(a.count() == 64)
}

fun test_first_position() {
  let a = 4
  precondition(a.first_position(where: fun (_ x) { x.copy() }) == 2)
  precondition(a.first_position(of: true) == 2)
}

fun test_reduce() {
  var a = Array<Int>()
  &a.append(1)
  &a.append(2)
  &a.append(3)

  let sum = a.reduce(0, fun (_ x: sink Int, _ y) { x + y })
  precondition(sum == 6)
}

fun test_contains_where() {
 var a = Array<Int>()
  &a.append(1)
  &a.append(2)
  &a.append(3)

  precondition(a.contains(where: fun(_ e: Int) { e == 2 }))
  precondition(!a.contains(where: fun(_ e: Int) { e == 10 }))
}

fun test_all_satisfy() {
  var a = Array<Int>()
  &a.append(1)
  &a.append(2)
  &a.append(3)

  precondition(a.all_satisfy(fun(_ e: Int) { e > 0 }))
  precondition(!a.all_satisfy(fun(_ e: Int) { e < 3 }))
}

public fun main() {
  test_count()
  test_first_position()
  test_reduce()
  test_contains_where()
  test_all_satisfy()
}
