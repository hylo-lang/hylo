//- compileAndRun expecting: .success

fun increment_100_times_under_lock(_ mutex: inout Mutex<Int>) {
  var i = 0
  while i < 100 {
    {
      inout proxy = &mutex.lock[]
      &proxy[] += 1
    }
    &i += 1
  }
}

public fun main() {
  let mutex: Mutex<Int> = .new(0)

  var t1 = spawn_thread(executing: fun[sink let p=mutable_pointer[to: &mutex].copy()]() {
    increment_100_times_under_lock(&(p.copy()).unsafe[])
  })
  var t2 = spawn_thread(executing: fun[sink let p=mutable_pointer[to: &mutex].copy()]() {
    increment_100_times_under_lock(&(p.copy()).unsafe[])
  })
  var t3 = spawn_thread(executing: fun[sink let p=mutable_pointer[to: &mutex].copy()]() {
    increment_100_times_under_lock(&(p.copy()).unsafe[])
  })

  t1.await()
  t2.await()
  t3.await()

  {
    inout proxy = &mutex.lock[]
    let r = proxy[]
    precondition(r == 300)
  }
  {
    if let proxy: MutexGuard<Int> = mutex.try_lock[] {
      let r = proxy[]
      precondition(r == 300)
    }
  }
}