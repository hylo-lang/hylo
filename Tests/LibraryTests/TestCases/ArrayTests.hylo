//- compileAndRun expecting: success

fun test_init_empty() {
  var d = Array<Int>()
  precondition(d.count() == 0)
}

fun test_init_with_lambda() {
  let d = Array<Int>(count: 10, initialized_with: fun (_ i) { i * 2 })
  precondition(d.count() == 10)
  precondition(d[0] == 0)
  precondition(d[2] == 4)
}

fun test_append() {
  var d = Array<Int>()
  &d.append(21)
  &d.append(42)
  &d.append(84)

  precondition(d[0] == 21)
  precondition(d[1] == 42)
  precondition(d[2] == 84)
}

fun test_insert_at() {
  var a = Array<Int>()
  &a.insert(21, at: 0)
  precondition(a[0] == 21)

  &a.insert(42, at: 0)
  precondition(a[0] == 42)
  precondition(a[1] == 21)

  &a.insert(84, at: 1)
  precondition(a[0] == 42)
  precondition(a[1] == 84)
  precondition(a[2] == 21)
}

fun test_remove_at() {
  var a = Array<Int>()
  &a.append(21)
  &a.append(42)
  &a.append(84)

  precondition(&a.remove(at: 1) == 42)
  precondition(a[0] == 21)
  precondition(a[1] == 84)

  precondition(&a.remove(at: 1) == 84)
  precondition(a[0] == 21)
}

fun test_remove_all() {
  var a = Array<Int>()
  &a.append(21)
  &a.append(42)

  &a.remove_all(keeping_capacity: true)
  precondition(a == Array())
  precondition(a.capacity() > 0)

  &a.append(21)
  &a.remove_all()
  precondition(a == Array())
  precondition(a.capacity() == 0)
}

fun test_pop_last() {
  var a = Array<Int>()
  &a.append(21)

  let y = if let x: Int = &a.pop_last() { x.copy() } else { -1 }
  precondition(y == 21)
  let z = if let x: Int = &a.pop_last() { x.copy() } else { -1 }
  precondition(z == -1)
}

fun test_swap_at() {
  var a = Array<Bool>()
  &a.append(false)
  &a.append(true)
  &a.swap_at(0, 1)
  precondition(a[0])
}

fun test_reverse() {
  var a = Array<Int>()
  &a.append(21)
  &a.append(42)
  &a.append(84)

  &a.reverse()
  precondition(a[0] == 84)
  precondition(a[1] == 42)
  precondition(a[2] == 21)
}

fun test_array_is_movable() {
  var a = Array<Int>()
  &a.append(21)
  &a.append(42)
  &a.append(84)

  var b = Array<Int>()
  &b.append(1)
  &b.append(2)
  &b.append(3)

  &b = a
  precondition(b[0] == 21)
  precondition(b[1] == 42)
  precondition(b[2] == 84)
}

fun test_array_is_equatable() {
  precondition(Array<Int>() == Array<Int>())

  var a = Array<Int>()
  &a.append(21)
  &a.append(42)
  precondition(a == a)
  precondition(a != Array())

  var b = Array<Int>()
  &b.append(21)
  &b.append(42)
  precondition(a == b)
}

fun test_array_is_copyable() {
  var a = Array<Int>()
  &a.append(21)
  &a.append(42)

  var b = a.copy()
  precondition(b[0] == 21)
  precondition(b[1] == 42)

  &b.append(84)
  precondition(a.count() == 2)
}

public fun main() {
  test_init_empty()
  test_append()
  test_insert_at()
  test_remove_at()
  test_remove_all()
  test_pop_last()
  test_swap_at()
  test_reverse()
  test_array_is_movable()
  test_array_is_equatable()
  test_array_is_copyable()
}
