type MyInt {

  var value: Int

  // Infix operators, present in C++

  //! h MyInt operator <<(MyInt other) {
  fun infix<<(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator >>(MyInt other) {
  fun infix>>(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator *(MyInt other) {
  fun infix*(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator /(MyInt other) {
  fun infix/(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator %(MyInt other) {
  fun infix%(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator +(MyInt other) {
  fun infix+(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator -(MyInt other) {
  fun infix-(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator ==(MyInt other) {
  fun infix==(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator !=(MyInt other) {
  fun infix!=(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator <(MyInt other) {
  fun infix<(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator <=(MyInt other) {
  fun infix<=(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator >=(MyInt other) {
  fun infix>=(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator >(MyInt other) {
  fun infix>(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator ^(MyInt other) {
  fun infix^(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator &(MyInt other) {
  fun infix&(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator &&(MyInt other) {
  fun infix&&(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator |(MyInt other) {
  fun infix|(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator ||(MyInt other) {
  fun infix||(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator <<=(MyInt other) {
  fun infix<<=(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator >>=(MyInt other) {
  fun infix>>=(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator *=(MyInt other) {
  fun infix*=(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator /=(MyInt other) {
  fun infix/=(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator %=(MyInt other) {
  fun infix%=(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator +=(MyInt other) {
  fun infix+=(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator -=(MyInt other) {
  fun infix-=(_ other: Self) -> Self {
    return self
  }
  //! h MyInt operator &=(MyInt other) {
  fun infix&=(_ other: Self) -> Self {
    return self
  }

  // Infix operators, not present in C++

  //! h MyInt infix_u2au21(MyInt other1) {
  fun infix*!(_ other1: Self) -> Self {
    return self
  }
  //! h MyInt infix_u2bu21(MyInt other2) {
  fun infix+!(_ other2: Self) -> Self {
    return self
  }
  //! h MyInt infix_u2du21(MyInt other3) {
  fun infix-!(_ other3: Self) -> Self {
    return self
  }
  //! h MyInt infix_u2eu2eu3c(MyInt other4) {
  fun infix..<(_ other4: Self) -> Self {
    return self
  }
  //! h MyInt infix_u2eu2eu2e(MyInt other5) {
  fun infix...(_ other5: Self) -> Self {
    return self
  }
  //! h MyInt infix_u3fu3f(MyInt other6) {
  fun infix??(_ other6: Self) -> Self {
    return self
  }
  //! h MyInt infix_u26u26u3d(MyInt other7) {
  fun infix&&=(_ other7: Self) -> Self {
    return self
  }
  //! h MyInt infix_u2au2a(MyInt other8) {
  fun infix**(_ other8: Self) -> Self {
    return self
  }

  // Prefix operators, present in C++

  //! h MyInt operator +(MyInt other) {
  fun prefix+(_ other:Self) -> Self {
    return self
  }
  //! h MyInt operator -(MyInt other) {
  fun prefix-(_ other:Self) -> Self {
    return self
  }
  //! h MyInt operator !(MyInt other) {
  fun prefix!(_ other:Self) -> Self {
    return self
  }

  // Prefix operators, not present in C++

  //! h MyInt prefix_u7e(MyInt other) {
  fun prefix~(_ other:Self) -> Self {
    return self
  }

  // Postfix operators, not present in C++

  //! h MyInt postfix_u21(MyInt other10) {
  fun postfix!(_ other10: Self) -> Self {
    return self
  }
  //! h MyInt postfix_u2eu2eu2e(MyInt other11) {
  fun postfix...(_ other11: Self) -> Self {
    return self
  }

}
