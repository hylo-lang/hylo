fun basicTest() {
  //! cpp 1 + 2 * 3
  let _ = 1 + 2 * 3
  //! cpp 2 + 2 * 3
  let _ = 2 + (2 * 3)
  //! cpp (3 + 2) * 3
  let _ = (3 + 2) * 3
}

type MyInt {

  let value: Int

  fun infix| (_ rhs: MyInt) -> MyInt {
    return MyInt(value: self.value + rhs.value)
  }
  fun infix^ (_ rhs: MyInt) -> MyInt {
    return MyInt(value: self.value - rhs.value)
  }
  fun infix& (_ rhs: MyInt) -> MyInt {
    return MyInt(value: self.value * rhs.value)
  }
  fun infix< (_ rhs: MyInt) -> MyInt {
    return if self.value < rhs.value { MyInt(value: 1) } else { MyInt(value: 0) }
  }
  fun infix== (_ rhs: MyInt) -> MyInt {
    return if self.value == rhs.value { MyInt(value: 1) } else { MyInt(value: 0) }
  }
  fun infix?? (_ rhs: MyInt) -> MyInt {
    return if self.value < rhs.value { self } else { rhs }
  }
  fun infix... (_ rhs: MyInt) -> MyInt {
    return MyInt(value: rhs.value - self.value)
  }
  fun infix+ (_ rhs: MyInt) -> MyInt {
    return MyInt(value: rhs.value + self.value)
  }
  fun infix* (_ rhs: MyInt) -> MyInt {
    return MyInt(value: rhs.value * self.value)
  }
  fun infix<< (_ rhs: MyInt) -> MyInt {
    return MyInt(value: rhs.value * self.value)
  }
  fun infix** (_ rhs: MyInt) -> MyInt {
    return MyInt(value: rhs.value * self.value)
  }

}

fun precedenceGroupsForVal() {
  var a = MyInt(value: 0)
  var b = MyInt(value: 0)
  var c = MyInt(value: 0)
  var d = MyInt(value: 0)

  // conjunction takes precedence over disjunction
  //! cpp a & b | c
  let _ = a & b | c
  //! cpp a & b | d
  let _ = (a & b) | d

  // comparison takes precedence over disjunction
  //! cpp a < b & c
  let _ = a < b & c
  //! cpp a < b & d
  let _ = (a < b) & d

  // TODO: fallback takes precedence over comparison
  // TODO: range precedence over fallback
  // TODO: addition over range

  // addition over comparison
  //! cpp a + b < c
  let _ = a + b < c
  //! cpp a + b < d
  let _ = (a + b) < d

  // multiplication over addition
  //! cpp a * b + c
  let _ = a * b + c
  //! cpp a * b + d
  let _ = (a * b) + d

  // shift over multiplication
  //! cpp (a << b) * c
  let _ = a << b * c
  //! cpp (a << b) * d
  let _ = (a << b) * d

  // TODO: exponentiation over shift
}

fun cxxPrecedenceTest() {
  var a = MyInt(value: 0)
  var b = MyInt(value: 0)
  var c = MyInt(value: 0)
  var d = MyInt(value: 0)

  // interaction between `==` and `<` (same precedence in Val)
  //! cpp (a == b) < c
  let _ = a == b < c
  //! cpp a < b == c
  let _ = a < b == c

  // interaction between `&`, `^` and `|`
  //! cpp a & b ^ c | d
  let _ = a & b ^ c | d
  //! cpp a & b ^ d | c
  let _ = (a & b) ^ d | c
  //! cpp (a | b) & c ^ d
  let _ = (a | b) & c ^ d

  // ternary operator
  //! cpp a + (b . value == 0 ? c : d)
  let _ = a + if (b.value == 0) { c } else { d }
}
