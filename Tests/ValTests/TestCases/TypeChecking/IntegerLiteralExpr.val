//! expect-failure

fun check<T>(_ x: T) {}

public fun main() {
  let i = 42
  check<Int>(i)

  let i32: Int32 = 42
  check<Int32>(i32)

  let i8: Int8 = 42
  check<Int8>(i8)

  let d: Double = 42
  check<Double>(d)

  let f: Float = 42
  check<Float>(f)

  let _: Double = i   //! diagnostic incompatible types 'Int' and 'Double'

  let _: Bool = 42    //! diagnostic type 'Bool' does not conform to trait 'ExpressibleByIntegerLiteral'
}
