//- typeCheck expecting: failure

fun check<T>(_ x: T) {}

public fun main() {
  let i = 42
  check<Int>(i)

  let i32: Int32 = 42
  check<Int32>(i32)

  let i8: Int8 = 42
  check<Int8>(i8)

  let d: Float64 = 42
  check<Float64>(d)

  let f: Float32 = 42
  check<Float32>(f)

  let _: Float64 = i   //! diagnostic cannot initialize object of type 'Float64' with value of type 'Int'

  let _: Bool = 42    //! diagnostic type 'Bool' does not conform to trait 'ExpressibleByIntegerLiteral'
}
