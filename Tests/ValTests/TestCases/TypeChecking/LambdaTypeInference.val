//! expect-failure

fun check<T>(_ x: T) {}

public fun main() {
  let f0 = fun () { 42 }
  check<[]() -> Int>(f0)

  let f1 = fun (x: sink Int) { x }
  check<[](x: sink Int) -> Int>(f1)

  let f2: [](x: sink Int) -> Int = fun (x) { x }
  check<[](x: sink Int) -> Int>(f2)

  let f3 = fun (x: sink Int) -> Int {
    let y = x
    return y
  }
  check<[](x: sink Int) -> Int>(f3)

  let x0 = (fun (_ x) { x.copy() })(42)
  check<Int>(x0)

  //! @+1 diagnostic cannot infer complex return type; add an explicit return type annotation
  let _ = fun (x: sink Int) {}

  //! @+1 diagnostic contextual lambda type requires 1 argument(s), found 0
  let _: [](x: Int) -> Int = fun () { 42 }

  //! @+1 diagnostic incompatible labels: found '(y:)', expected '(x:)'
  let _: [](x: Int) -> Int = fun (y: Int) { 42 }
}
