//! expect-failure

trait T {
  fun foo() -> Int
}

trait U: T {
  fun bar() -> Int
}

trait R {
  fun ham() -> Int
}

type A: U, R {
  public fun foo() -> Int { 42 }
  public fun bar() -> Int { 42 }
  public fun ham() -> Int { 42 }
}

fun check<T>(_ x: T) {}

public fun main() {
  let x0: any U = A()
  let x1: any U & R = A()

  // Note: resolves to `T.foo`.
  check<Int>(x0.foo())

  // Note: resolves to `T.foo`.
  check<Int>(x1.foo())

  // Note: resolves to `U.bar`.
  check<Int>(x0.bar())

  // Note: resolves to `U.bar`.
  check<Int>(x1.bar())

  //! @+1 diagnostic type 'any U' has no member 'ham'
  _ = x0.ham()

  // Note: resolves to `R.ham`.
  check<Int>(x1.ham())

  {
    extension any U {
      public fun foo() -> Bool { true }
    }

    // Note: resolves to `(any T).foo`, declared in the extension.
    check<Bool>(x0.foo())

    // Note: resolves to `T.foo`.
    check<Int>(x1.foo())
  }
}
