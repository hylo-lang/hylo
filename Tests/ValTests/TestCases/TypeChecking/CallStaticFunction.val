//- typeCheck expecting: failure

type A {

  memberwise init

  public static fun make() -> A { A() }

  public static fun make_overloaded() -> A { A() }

  public static fun make_overloaded(_ x: Bool) -> A { A() }

}

fun check<T>(_ x: T) {}

public fun main() {
  let x = A.make()
  check<A>(x)

  let y = A.make_overloaded(true)
  check<A>(y)

  //! @+1 diagnostic reference to member 'make' cannot be resolved without context
  _ = .make()
}
