//- typeCheck expecting: failure

type A { public memberwise init }

type B { public memberwise init }

type C {
  public init(a: A = A()) {}
  public fun foo(a: A = A()) {
    let {}
  }
}

fun f0(a: A, b: B = B()) {}

fun f1(a: A = A(), b: B) {}

//! @+1 diagnostic cannot pass value of type 'Bool' to parameter 'let B'
fun g0(a: A, b: B = true) {}

public fun main() {
  f0(a: A())
  //! @+1 diagnostic incompatible labels: found '(b:)', expected '(a:b:)'
  f0(b: B())
  //! @+1 diagnostic incompatible labels: found '(a:_:)', expected '(a:b:)'
  f0(a: A(), B())

  f1(b: B())
  //! @+1 diagnostic incompatible labels: found '(a:)', expected '(a:b:)'
  f1(a: A())

  let x = C()
  x.foo()
}
