//! expect-failure

type A {}
type B {}
type C<T> {}

fun check<T>(_ x: T) {}

public fun main() {
  let x0 : Metatype<A> = A
  check<Metatype<A>>(x0)

  let x1 : Metatype = A
  check<Metatype<A>>(x1)

  let x2 : Metatype<_> = A
  check<Metatype<A>>(x2)

  let x3 = A
  check<Metatype<A>>(x3)

  //! @+1 diagnostic cannot initialize object of type 'Metatype<B>' with value of type 'Metatype<A>'
  let _ : Metatype<B> = A

  let x4 = C<A>
  check<Metatype<C<A>>>(x4)
}
