//- typeCheck expecting: failure

fun use(_ x: Bool) {}

fun test(b: Bool, i: Int) {
  if b { use(b) }

  if b, b { use(b) }

  //! @+1 diagnostic 'Int' is not subtype of 'Bool'
  if i { use(b) }

  let x: Union<Int, Bool> = 1

  if let y: Int = x, y != 0 { use(b) }

  //! @+1 diagnostic 'Int' is not subtype of 'Bool'
  if let y: Int = x, y { use(b) }
}
