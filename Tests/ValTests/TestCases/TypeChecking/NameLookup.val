//! expect-success

fun check<T>(_ x: T) {}

extension A {
  public typealias C = D

  public fun m1() {
    let  {}
    sink {}
  }
  public fun m3() {
    m0()
    m1()
    self.m2()
  }
}

extension A {
  public typealias D = E
}

type A {
  public typealias B = C
  public type E {}

  public fun m0() {}
  public fun m2() {
    m0()
    m1()
    self.m2()
  }
}

typealias B = A.B

trait T {}

conformance A: T {
  fun m4() { m1() }
}

namespace N0 {
  namespace N1 {
    public fun f0() {
      N0.g()

      g0()
      N1.g0()
      N0.N1.g0()
    }
    fun g0() {}
  }

  public fun g() {}
  public fun h() {
    N0.N1.f0()
    f0()
  }
}

fun f0() {
  let x = A.E()
  check<B>(x)
  check<A.B>(x)
  check<A.C>(x)
  check<A.D>(x)
  check<A.E>(x)
}

fun f1() {
  let x = A()
  x.m0()
  x.m1()
  x.m1.let()
  x.m1.sink()
}

fun f2() {
  // Note: `NameLookup` is the name of the containing module
  let x = NameLookup.A()
  check<A>(x)
}
