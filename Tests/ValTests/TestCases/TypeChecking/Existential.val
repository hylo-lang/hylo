//! expect-failure

trait P1 {}
trait P2 {}
trait P3 {}

type A<T> {
  public memberwise init
}

type B: P1, P2 {
  public memberwise init
}

fun check<T>(_ x: T) {}

public fun main() {
  let x0: any A = A<Int>()
  check<any A>(x0)

  let x1: any Copyable = 0
  check<any Copyable>(x1)

  let x2: any P1 & P2 = B()
  check<any P1 & P2>(x2)

  //! @+1 diagnostic incompatible types 'Int' and 'A<_>'
  let _: any A = Int()

  //! @+1 diagnostic type 'B' does not conform to trait 'Copyable'
  let _: any Copyable = B()

  //! @+1 diagnostic type 'B' does not conform to trait 'P3'
  let _: any P1 & P3 = B()
}
