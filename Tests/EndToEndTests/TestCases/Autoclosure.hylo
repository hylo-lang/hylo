//- compileAndRun expecting: .success

let log: PointerToMutable<Int> = .allocate(count: 1)

fun prime() -> Int {
  &(log.copy()).unsafe[] += 1
  return 17
}

fun run<E>(
  lazily_evaluating value: @autoclosure [E]() -> Int,
  starting_at s: Int,
  ending_at e: Int
) {
  precondition(log.unsafe[] == s)
  let x = value()
  precondition(log.unsafe[] == e)
  precondition(x == 17)
}

public fun main() {
  _ = log.unsafe_initialize_pointee(fun (_ a: set Int) -> Void { &a = 0 })

  // Lazy parameter without captures.
  run(lazily_evaluating: prime(), starting_at: 0, ending_at: 1)
  run(lazily_evaluating: 17, starting_at: 1, ending_at: 1)
  run(lazily_evaluating: prime(), starting_at: 1, ending_at: 2)

  // TODO: Test with generics and non-void environments.

  log.copy().deallocate()
}
