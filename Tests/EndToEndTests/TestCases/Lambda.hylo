//- compileAndRun expecting: success

fun apply<E>(_ f: inout ([E]() inout -> Int)) -> Int {
  &f()
}

public fun main() {
  // Applies a thin, immutable lambda.
  let a = apply(fun() { 42 })
  precondition(a == 42)

  // Applies a thick, immutable lambda.
  let forty_two = 42
  let b = apply(fun() { forty_two.copy() })
  precondition(b == 42)

  // Applies a mutable lambda with owned captures.
  var owning_counter = fun[var x = 42]() inout -> Int {
    (x.copy(), &x += 1).0
  }
  precondition(&owning_counter() == 42)
  let c = apply(&owning_counter)
  precondition(c == 43)

  // Applies a mutable lambda with borrowed captures.
  var y = 42
  var borrowing_counter = fun() inout -> Int {
    (y.copy(), &y += 1).0
  }
  precondition(&borrowing_counter() == 42)
  let d = apply(&borrowing_counter)
  precondition(d == 43)

  // Applies an lambda borrowing a pointer.
  var z = 0
  let p = mutable_pointer[to: &z]
  var f = fun() -> Int {
    &(p.unsafe[]) = 42
    return p.unsafe[].copy()
  }
  precondition(f() == 42)
}
