//- compileAndRun expecting: .success

fun f<T: Regular, U: Regular>(_ u: sink Union<T, U>) -> Bool {
  if let _: T = u { true } else { false }
}

public fun main() {
  var x: Union<{a: Bool}, {b: Int}> = (b: 42)
  if let y: {b: _} = x {
    precondition(y.0 == 42)
  } else {
    fatal_error()
  }

  precondition(f<Int, Bool>(42 as _))
  precondition(f<Int, Int>(42 as _))
  precondition(!f<Int, Bool>(true as _))
}
