//- compileAndRun expecting: success

/// The space between two intersecting lines.
public type Angle: Deinitializable {

  /// The value of `self` in radians.
  public var radians: Float64

  /// Creates an instance with its value in radians.
  public memberwise init

  /// Creates an instance with its value in degrees.
  public init(degrees: Float64) {
    &self.radians = degrees * Float64.pi() / 180.0
  }

  /// The value of `self` in degrees.
  public property degrees: Float64 {
    let { radians * 180.0 / Float64.pi() }
    inout {
      var d = radians * 180.0 / Float64.pi()
      yield &d
      &self.radians = d * Float64.pi() / 180.0
    }
  }

  /// A copy of `self` wrapped within the interval `[0, 2 * pi[`.
  public fun wrapped() -> Self {
    var r = radians.copy()
    if r < 0.0 {
      while r < 0.0 {
        &r = r + 2.0 * Float64.pi()
      }
    } else {
      while r >= 2.0 * Float64.pi() {
        &r = r - 2.0 * Float64.pi()
      }
    }
    return Angle(radians: r)
  }

}

public fun main() {
  var a = Angle(radians: .pi())

  inout d = &a.degrees
  precondition(d == 180.0)
  &d = 0.0
  precondition(a.radians == 0.0)

  &a.radians = 2.0 * Float64.pi()
  precondition(a.wrapped().radians == 0.0)
}
