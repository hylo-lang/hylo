//- compileAndRun expecting: success

type A<T>: Deinitializable {
  public let x: Int
  public init<U>(_ t: Metatype<U>) {
    &self.x = Self.foo() - MemoryLayout<U>.size()
  }
  static fun foo() -> Int { MemoryLayout<T>.size() }
}

public fun main() {
  let a = A<Bool>(Bool)
  precondition(a.x == 0)

  let b = A<Int>(Int)
  precondition(b.x == 0)

  let c = A<Int32>(Int8)
  precondition(c.x != 0)
}
