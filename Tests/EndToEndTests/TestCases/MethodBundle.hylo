//- compileAndRun expecting: .success

type A: Deinitializable {

  public var x: Int

  public memberwise init

  public fun foo() -> Int {
    let  { (self: A(x: x.copy()), x.copy()) }
    sink { (self: A(x: x.copy()), x) }
  }

}

public type B: Deinitializable {

  public let x: Int

  public memberwise init

  public fun foo(_ n: sink Int) {
    let   { B(x: n) }
    inout { &self.x = n }
  }

}

public fun main() {
  var a = A(x: 42)
  precondition(a.foo().1 == 42)
  precondition(a.foo().1 == 42)

  var b0 = B(x: 1)
  let b1 = b0.foo(2)
  precondition(b1.x == 2)
  &b0.foo(3)
  precondition(b0.x == 3)
}
