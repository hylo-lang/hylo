//- typeCheck expecting: .success

type A<X>: Movable, Deinitializable {
  public memberwise init
}

type B<X: Deinitializable & Movable>: Movable, Deinitializable {
  var foo: X
  public memberwise init

  public fun bar() -> B<Int> { B(foo: 0) }
  public fun bar(x: Int) -> B<Int> { B(foo: 0) }
}

fun f<T>() -> A<T> {
  sink let x = A<T>()
  return x
}

fun check<T>(_ x: T) {}

public fun main() {
  let a0 = f<Int>()
  check<A<Int>>(a0)

  let b0 = B(foo: true)
  check<B<Bool>>(b0)

  let b1 = b0.bar().bar()
  check<B<Int>>(b1)
}
