//- typeCheck expecting: failure

fun apply_immutable<E>(_ f: ([E]() -> Void)) { f() }

public fun main() {
  let noop = fun() -> Void {}
  apply_immutable(noop)

  let f = fun[var x = 0]() -> Void { &x += 1 }
  //! @+2 diagnostic not enough contextual information to infer generic arguments
  //! @+1 diagnostic cannot pass value of type '[{x: Int}] () inout -> Void' to parameter 'let [_] () let -> Void'
  apply_immutable(f)
  // Note: Generic argument deduction fails because the constraint solver never gets to fully unify
  // the type of `f` with the type of `apply_immutable`'s argument.
}
