//- typeCheck expecting: failure

@ffi("abort")
fun abort() -> Never

fun check<T>(_ x: T) {}

fun fn(x: Int) -> Int { abort() }

fun fn(x: Float64) -> Float64 { abort() }

fun fn(x: Any) -> Any { abort() }

fun fn<T>(x: T) -> T { abort() }

fun fn<T>(_ x: T, _ y: T) -> T { abort() }

fun fn<T>(_ x: T, _ y: Int) -> T { abort() }

fun fn(_ x: Any, _ y: Any) -> Any { abort() }

public fun main() {
  let x0 = fn(x: 1)
  check<Int>(x0)

  let x1 = fn(x: true)
  check<Bool>(x1)

  let x2: Int = fn(x: 1)
  check<Int>(x2)

  let x3: Float64 = fn(x: 1)
  check<Float64>(x3)

  let x4: Float64 = fn(1.0, 1.0)
  check<Float64>(x4)

  let x5 = fn(true, false)
  check<Bool>(x5)

  let x6 = fn(1, true)
  check<Any>(x6)

  let a = 1
  fn(a, a)    //! diagnostic ambiguous use of 'fn'
}
