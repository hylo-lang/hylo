//- typeCheck expecting: success

type M<T> {
  public var x: T
  public memberwise init

  public type P: Deinitializable {
    public var y: T
    public memberwise init

    public subscript (): T {
      let { yield y }
      inout { yield &y }
    }

    public fun g() -> T { y }
  }

  public fun f() -> P { P(y: x) }
}

fun test(x: M<Int>) -> Int {
  return &x.f().g()
}
