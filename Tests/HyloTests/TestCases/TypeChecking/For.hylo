//- typeCheck expecting: failure

type Counter: Iterator, Deinitializable {
  public var n: Int
  public memberwise init
  public typealias Element = Int
  public fun next() inout -> Optional<Int> {
    (n.copy(), &n += 1).0 as _
  }
}

fun check<T>(_ x: T) {}

public fun main() {
  let a = CollectionOfOne<Optional<Int>>(0)

  // Non-consuming for-loop.
  for let x in a {
    check<Optional<Int>>(x)
  }

  // Non-consuming for-loop with narrowing pattern.
  for let x: Int in a {
    check<Int>(x)
  }

  // Non-consuming for loop with a filter.
  for let x: Int in a where x > 0 {
    check<Int>(x)
  }

  // Non-consuming for-loop using an iterator.
  for let x in Counter(n: 0) {
    check<Int>(x)
  }

  // Consuming for-loop.
  for sink let _ in Counter(n: 0) {}

  //! @+1 diagnostic non-consuming for loop requires 'Bool' to conform to 'Collection' or 'Iterator'
  for let _ in true {}

  //! @+1 diagnostic consuming for loop requires 'CollectionOfOne<Optional<Int>>' to conform to 'Iterator'
  for sink let _ in a {}

  //! @+1 diagnostic incompatible types 'Bool' and '{}'
  for let _ in a where () {}
}
