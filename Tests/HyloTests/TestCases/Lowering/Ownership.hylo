//- lowerToFinishedIR expecting: failure

fun read<T>(_ x: T) {}
fun modify<T>(_ x: inout T) {}

fun f0() {
  var s = (0, 0)

  // Project parts of `s` immutably.
  let s0 = s.0
  let s1 = s.0
  read(s0)
  read(s1)
  // Immutable projections end here.

  // Mutable projection is now legal.
  inout t = &s
  modify(&t)
  // Mutable projection ends here.

  modify(&s)
}

fun f1() {
  var s = (0, 0)

  // Project individual parts of `s` mutably.
  inout s0 = &s.0
  inout s1 = &s.1
  modify(&s0)
  modify(&s1)
  // Mutable projections end here.

  modify(&s)
}

fun f2() {
  var s = (0, 0)

  // Project `s mutably.
  inout t = &s

  // Re-project individual parts of `t`.
  inout t0 = &t.0
  let t1 = t.1
  modify(&t0)
  read(t1)
  // Part projections end here.

  modify(&t)
  modify(&s)
}

fun f3() {
  var s = (0, 0)

  // Project a part of `s` immutably.
  let t = s.0

  // Overlapping immutable projection is legal.
  let u = s
  read(u)
  read(t)
  // Imutable projections end here.

  modify(&s)
}

fun f4() {
  var s = (0, 0)

  // Project a part of `s` immutably.
  let t = &s.0

  // Overlapping mutable projection is illegal.
  inout u = &s //! diagnostic illegal mutable access
  modify(&u)
  read(t)
}


fun f5() {
  var s = (0, 0)

  // Project a part of `s` mutably.
  inout t = &s.0

  // Overlapping immutable projection is illegal.
  let u = s //! diagnostic illegal immutable access
  read(u)
  modify(&t)
}
